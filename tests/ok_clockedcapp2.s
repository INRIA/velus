# File generated by CompCert 3.5
# Command line: ok_clockedcapp2.lus
	.data
	.align	3
	.globl	_self$
_self$:
	.space	4
	.data
	.align	3
	.globl	_y$
_y$:
	.space	1
	.data
	.align	3
	.globl	_x$
_x$:
	.space	1
	.data
	.align	3
	.globl	_z$
_z$:
	.space	1
	.text
	.align	4
	.globl _fun$f$step
_fun$f$step:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %eax
	movl	%eax, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	8(%eax), %esi
	movl	4(%eax), %ebx
	movl	0(%eax), %edi
	movzbl	0(%edi), %eax
	cmpl	$0, %eax
	setne	%dl
	movzbl	%dl, %edx
	movb	%dl, 1(%ebx)
	cmpl	$0, %edx
	sete	%cl
	movzbl	%cl, %ecx
	movb	%cl, 0(%edi)
	movzbl	1(%ebx), %edx
	cmpl	$0, %edx
	jne	L100
	xorl	%eax, %eax
	movb	%al, 0(%ebx)
	jmp	L101
L100:
	cmpl	$0, %esi
	setne	%cl
	movzbl	%cl, %ecx
	movb	%cl, 0(%ebx)
L101:
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	movl	12(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.text
	.align	4
	.globl _fun$f$reset
_fun$f$reset:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %eax
	movl	%eax, 0(%esp)
	movl	0(%eax), %ecx
	xorl	%edx, %edx
	movb	%dl, 0(%ecx)
	addl	$12, %esp
	ret
	.cfi_endproc
	.text
	.align	4
	.globl _fun$g$step
_fun$g$step:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %eax
	movl	%eax, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	12(%eax), %edx
	movl	8(%eax), %ecx
	movl	0(%eax), %ebx
	cmpl	$0, %edx
	je	L102
	movzbl	0(%ebx), %edx
	cmpl	$0, %ecx
	sete	%al
	movzbl	%al, %eax
	movb	%al, 0(%ebx)
	jmp	L103
L102:
	xorl	%edx, %edx
L103:
	cmpl	$0, %edx
	setne	%al
	movzbl	%al, %eax
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.text
	.align	4
	.globl _fun$g$reset
_fun$g$reset:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %eax
	movl	%eax, 0(%esp)
	movl	0(%eax), %ecx
	xorl	%edx, %edx
	movb	%dl, 0(%ecx)
	addl	$12, %esp
	ret
	.cfi_endproc
	.text
	.align	4
	.globl _fun$h$step
_fun$h$step:
	.cfi_startproc
	subl	$60, %esp
	.cfi_adjust_cfa_offset	60
	leal	64(%esp), %eax
	movl	%eax, 20(%esp)
	movl	%ebx, 24(%esp)
	movl	%esi, 28(%esp)
	movl	%edi, 32(%esp)
	movl	%ebp, 36(%esp)
	movl	8(%eax), %ecx
	movl	4(%eax), %esi
	movl	0(%eax), %edx
	movl	%edx, 40(%esp)
	cmpl	$0, %esi
	je	L104
	leal	50(%esp), %edx
	movl	$1, %ebx
	cmpl	$0, %ecx
	setne	%al
	movzbl	%al, %eax
	movl	%eax, %edi
	xorl	%ecx, %ecx
	movl	%ecx, 16(%esp)
	movl	%edi, 12(%esp)
	movl	%ebx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	40(%esp), %eax
	movl	%eax, 0(%esp)
	call	_fun$f$step
	movzbl	50(%esp), %eax
	movzbl	51(%esp), %ebx
	jmp	L105
L104:
	xorl	%eax, %eax
	xorl	%ebx, %ebx
L105:
	movl	40(%esp), %edx
	leal	1(%edx), %edi
	cmpl	$0, %eax
	setne	%dl
	movzbl	%dl, %edx
	cmpl	$0, %ebx
	setne	%bl
	movzbl	%bl, %ebx
	cmpl	$0, %esi
	setne	%al
	movzbl	%al, %eax
	movl	%eax, 12(%esp)
	movl	%ebx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%edi, 0(%esp)
	call	_fun$g$step
	movl	%eax, %ebx
	cmpl	$0, %esi
	je	L106
	cmpl	$0, %ebx
	je	L107
	movl	40(%esp), %ecx
	leal	2(%ecx), %ecx
	leal	48(%esp), %edi
	movl	$1, %edx
	movl	$1, %ebp
	xorl	%eax, %eax
	movl	%eax, 16(%esp)
	movl	%ebp, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%edi, 4(%esp)
	movl	%ecx, 0(%esp)
	call	_fun$f$step
	movzbl	48(%esp), %ecx
	movzbl	49(%esp), %edx
	jmp	L108
L107:
	xorl	%ecx, %ecx
	xorl	%edx, %edx
L108:
	movl	40(%esp), %eax
	leal	3(%eax), %edi
	cmpl	$0, %ecx
	setne	%al
	movzbl	%al, %eax
	movl	%eax, %esi
	cmpl	$0, %edx
	setne	%dl
	movzbl	%dl, %edx
	cmpl	$0, %ebx
	setne	%cl
	movzbl	%cl, %ecx
	movl	%ecx, 12(%esp)
	movl	%edx, 8(%esp)
	movl	%esi, 4(%esp)
	movl	%edi, 0(%esp)
	call	_fun$g$step
	jmp	L109
L106:
	xorl	%ebx, %ebx
L109:
	cmpl	$0, %ebx
	setne	%al
	movzbl	%al, %eax
	movl	24(%esp), %ebx
	movl	28(%esp), %esi
	movl	32(%esp), %edi
	movl	36(%esp), %ebp
	addl	$60, %esp
	ret
	.cfi_endproc
	.text
	.align	4
	.globl _fun$h$reset
_fun$h$reset:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %eax
	movl	%eax, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%eax), %ebx
	movl	%ebx, 0(%esp)
	call	_fun$f$reset
	leal	1(%ebx), %edx
	movl	%edx, 0(%esp)
	call	_fun$g$reset
	leal	2(%ebx), %ecx
	movl	%ecx, 0(%esp)
	call	_fun$f$reset
	leal	3(%ebx), %eax
	movl	%eax, 0(%esp)
	call	_fun$g$reset
	movl	8(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.text
	.align	4
	.globl _main_proved
_main_proved:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %eax
	movl	%eax, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	leal	_self$, %eax
	movl	%eax, 0(%esp)
	call	_fun$h$reset
L110:
	movzbl	_x$, %ecx
	movzbl	_z$, %ebx
	leal	_self$, %esi
	cmpl	$0, %ecx
	setne	%dl
	movzbl	%dl, %edx
	cmpl	$0, %ebx
	setne	%cl
	movzbl	%cl, %ecx
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%esi, 0(%esp)
	call	_fun$h$step
	cmpl	$0, %eax
	setne	%al
	movzbl	%al, %eax
	movb	%al, _y$
	jmp	L110
	.cfi_endproc
	.text
	.align	4
	.globl _main
_main:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %eax
	movl	%eax, 0(%esp)
	call	_main_proved
	movl	%ebx, %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.section __IMPORT,__pointers,non_lazy_symbol_pointers
