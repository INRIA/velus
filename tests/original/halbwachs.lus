(* Lustre examples from "Synchronous Programming of Reactive Systems",
   Nicolas Halbwachs, 1993 Kluwer Academic Publishers. *)

node COUNTER(init_value, incr_value: int; reset: bool)
   returns (N: int);
let
   N = init_value -> if reset then init_value
                     else pre(N) + incr_value;
tel

node WATCHDOG1 (set, reset, deadline: bool)
   returns (alarm: bool);
var watchdog_is_on: bool;
let
   alarm = deadline and watchdog_is_on;
   watchdog_is_on = false -> if set then true
                             else if reset then false
                             else pre(watchdog_is_on);
   assert not(set and reset);
tel

node EDGE (b: bool) returns (edge: bool);
let
   edge = false -> (b and not pre(b));
tel

node WATCHDOG2 (set, reset: bool; delay: int)
   returns (alarm: bool);
var remaining_delay: int; deadline: bool;
let
   alarm = WATCHDOG1(set, reset, deadline);
   deadline = EDGE(remaining_delay = 0);
   remaining_delay = if set then delay else
                     (0 -> pre(remaining_delay) - 1);
tel

node WATCHDOG3 (set, reset, time_unit: bool;
                delay: int)
   returns (alarm: bool);
var clock: bool; let
   alarm = current(WATCHDOG2
               ((set, reset, delay) when clock));
   clock = true -> set or reset or time_unit;
tel

node Simple_Stopwatch (start_stop, reset, hs: bool)
   returns (time: int; running: bool);
let
  time = 0 -> if hs and running then pre(time) + 1
              else if reset then 0 else pre(time);
  running = false -> if start_stop then
                     not pre(running)
                     else pre(running);
tel

node Stopwatch (start_stop, reset, hs: bool)
   returns (displayed_time: int; running, frozen: bool);
var internal_time: int; actual_reset: bool;
let
  frozen = false ->
              if reset and pre(running) then true
              else if reset and pre(frozen) then false
              else pre(frozen);
  displayed_time =
           current(internal_time when not frozen);
  (internal_time, running) =
      Simple_Stopwatch(start_stop, actual_reset, hs);
  actual_reset =
      reset and pre(not running and not frozen);
tel

node SWITCH_1(ON, OFF, INIT: bool) returns (STATE: bool);
let
   STATE = INIT -> if ON then true
                   else if OFF then false
                   else pre(STATE);
tel

node SWITCH(ON, OFF, INIT: bool) returns (STATE: bool);
let
   STATE = INIT -> if ON and not pre(STATE) then true
                   else if OFF and pre(STATE) then false
                   else pre(STATE);
tel

node COMPARE(ON, OFF, INIT: bool) returns (OK: bool);
var state, state_1 : bool;
let
   state = SWITCH(ON, OFF, INIT);
   state_1 = SWITCH_1(ON, OFF, INIT);
   OK = (state = state_1);
   assert not(ON and OFF);
tel

