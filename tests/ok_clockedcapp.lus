
node f(x: bool)
returns (y: bool when z; z: bool);
let
  z = false fby (not z);
  y = x when z;
tel

(* y :: 'a on x on z   z:: 'a on x    x :: 'a   *)
node g(y: bool when z; z: bool when x; x: bool)
returns (o: bool when x)
let
  o = false fby (not z);
tel

node h(x: bool)
returns (y: bool);
var w: bool when x;
let
  y = merge x w false;
  (* The correct form is:
        w = g(f(true when x), x);
     
     This example tests whether the compiler infers the missing
     "when" across node applications. *)
  w = g(f(true), x);
tel

