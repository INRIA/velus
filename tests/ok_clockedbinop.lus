
node f(x: bool; y: bool when x)
returns (z: bool);
var w, t: bool;
let
  w = merge x (true -> y and (z when x))
              (false -> z when not x);
  t = false fby w;
  z = t;
tel

node g(x: bool)
returns (y: bool);
var w, t: bool when x;
let
  w = true when x;
  (* The correct form is:
        t = (false when x) and w
     This example tests whether the compiler infers the missing "when". *)
  t = false and w;
  y = f(x, t);
tel

