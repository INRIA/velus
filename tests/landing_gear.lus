(*
   2014 Marion Scoazec.

   Model of the landing gear subsystem.

   Communications in Computer and Information Science, Volume 433, 2014
   "ABZ 2014: The Landing Gear Case Study", Proceedings of the case study
   track of the 4th International Conference on Abstract State Machines,
   Alloy, B, TLA, VDM, and Z, Toulouse, France, June 2-6, 2014.
   (eds.) Frédéric Boniol, Virginie Wiels, Yamine Ait Ameur,
   Klaus-Dieter Schewe
*)


-- vrai si la derniere occurrence de start est arrivee il y a au moins time
node end_delay_last (time_base, start : bool; time : int)
returns (ended : bool);
var x_c, pre_x_c : int;
    init : bool;
let
  assert (x_c < 400);
  x_c = if init then 0 
        else if start then 0
        else if time_base then pre_x_c + 1
        else pre_x_c;
  pre_x_c = 0 fby x_c;
  init = true fby false;
  ended = x_c = time;
tel

node end_delay (time_base, started : bool; time : int)
returns (ended : bool);
var x_d, pre_x_d : int;
    pre_started, init : bool;
let
  init = true fby false;
  x_d = if init then 0
        else if started and not pre_started then 0
        else if started and time_base
        then pre_x_d + 1 else pre_x_d;
  ended = started and x_d >= time;

  pre_started = true fby started;
  pre_x_d = 0 fby x_d;
tel

node since_last_never (a, b : bool) returns (since_last_a_never_b : bool);
var pre_since_last_a_never_b : bool;
let
  pre_since_last_a_never_b = true fby since_last_a_never_b;
  since_last_a_never_b = if a then true
                         else if b then false
                              else pre_since_last_a_never_b;
tel

node implies (a, b : bool)
returns (aimpliesb : bool);
let
  aimpliesb = not a or a and b;
tel

node alternate (a, b : bool) returns (ok : bool);
var attentea, attenteb : bool;
    pre_attentea, pre_attenteb, init : bool;
let
  init = true fby false;
  attenteb = if init then true
             else if a then true
             else if b then false
             else pre_attenteb;
  attentea = if init then true
             else if b then true
             else if a then false
             else pre_attentea;
  ok = not (a and b) and
    (not (not pre_attenteb and b) or (not pre_attentea and a));

  pre_attentea = false fby attentea;
  pre_attenteb = false fby attenteb;
tel

node never (b : bool) returns (never : bool);
var pre_never : bool;
let
  never = if b then false else pre_never;
  pre_never = true fby never;
tel


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-- Analogical switch - time given

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-- the time base is the third of 0.1 second
--------------------------------------------------------------------------------

node analogical_switch_all_outputs (time_base, handle_up, handle_down : bool)
returns (x_a : int; open, closing, opening, closed : bool);
var handle_move : bool; position : int;
    init, pre_open, pre_opening,
    pre_closed, pre_closing, pre_pre_closing : bool;
    pre_x_a : int;
let

  handle_move = handle_up or handle_down;

  init = true fby false;
  open = init or ((pre_open and pre_x_a = 0) or pre_opening and (pre_x_a >= 3*12)
         and not handle_move);
  pre_open = false fby open;
  pre_opening = false fby opening;
  pre_x_a = 0 fby x_a;

  closing = pre_closing and (pre_x_a < 3*8)
            or ((pre_opening or pre_open) and handle_move);
  pre_closed = false fby closed;
  pre_closing = false fby closing;
  pre_pre_closing = false fby pre_closing;

  closed = not init or (pre_closed and (handle_move or (pre_x_a < 3*200))
           or pre_closing and (pre_x_a >= 3*8));

  opening = (pre_opening and (pre_x_a < 3*12 - 2*position)
            or pre_closed and (pre_x_a >= 3*200)) and not handle_move;

  x_a =
    if open
       or closing and (pre_open or pre_opening)
       or closed  and (pre_closing or handle_move)
       or opening and pre_closed
    then 0
    else if time_base then pre_x_a + 1
         else pre_x_a;

   position = if pre_opening and pre_pre_closing then pre_x_a else 0;
tel

node analogical_switch (time_base, handle_up, handle_down : bool)
returns (closed : bool);
var x_b : int; open, closing, opening : bool;

let

  (x_b, open, closing, opening,
   closed) = analogical_switch_all_outputs (time_base, handle_up, handle_down);

tel

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-- Cylinders - time given

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

node cylinder_all_outputs (time_base, pressure_up, pressure_down, i : bool;
                           -- i is true if the initial position is up
                           time_unlock_down, time_down_to_up,
                           time_lock_up, time_unlock_up,
                           time_up_to_down, time_lock_down : int)
returns (down, down_to_up, up, up_to_down : bool;
         x : int);
var condition : bool;
    init, pre_down, pre_up_to_down, pre_down_to_up, pre_up : bool;
    pre_x : int;
let
  
  condition = false fby (x >= 100);
  
  init = true fby false;
  down = (init and not i) or (pre_up_to_down and pressure_down and
                              (pre_x >= time_up_to_down)
                               or pre_down and not pressure_up);
  pre_down = false fby down;
  pre_up_to_down = false fby up_to_down;
  pre_down_to_up = false fby down_to_up;
  pre_x = 0 fby x;

  down_to_up = pre_down and pressure_up
               or pre_up_to_down and pressure_up
               or pre_down_to_up and not pressure_down and
               (not init and (not pressure_up or (pre_x < time_down_to_up)));
   
  up = (init and i) or
       (pre_down_to_up and pressure_up and (pre_x >= time_down_to_up)
        or pre_up and not pressure_down);
  pre_up = false fby up;

  up_to_down = pre_up and pressure_down
               or pre_down_to_up and pressure_down
               or pre_up_to_down and not pressure_up and
               (not init and (not pressure_down or (pre_x < time_up_to_down)));

  x = if down and pre_up_to_down
    or up and pre_down_to_up
    or down_to_up and pre_up_to_down
    or up_to_down and pre_down_to_up
    or down_to_up and pre_down
    or up_to_down and pre_up
         then 0
    else if (pressure_down and up_to_down)
         or (pressure_up and down_to_up) and time_base
         then pre_x + 1 
    else pre_x;

tel

node cyl_test (pressure_up, pressure_down, init_up : bool;
               time_unlock_down, time_down_to_up, time_lock_up,
               time_unlock_up, time_up_to_down, time_lock_down : int)
returns (locked_up, locked_down, down_to_up, up_to_down : bool; x : int);
var time_base : bool;

let

  time_base = true;
 
  (locked_down, down_to_up, locked_up, up_to_down,
   x) = cylinder_all_outputs (time_base, pressure_up, pressure_down, init_up,
                              time_unlock_down, time_down_to_up,
                              time_lock_up, time_unlock_up,
                              time_up_to_down, time_lock_down);
tel

node cylinder (time_base, pressure_up, pressure_down, init_up : bool;
               time_unlock_down, time_down_to_up, time_lock_up,
               time_unlock_up, time_up_to_down, time_lock_down : int)
returns (locked_up, locked_down : bool);
var down_to_up, up_to_down : bool; x : int;

let
 
  (locked_down, down_to_up, locked_up, up_to_down,
   x) = cylinder_all_outputs (time_base, pressure_up, pressure_down, init_up,
                              time_unlock_down, time_down_to_up,
                              time_lock_up, time_unlock_up,
                              time_up_to_down, time_lock_down);
tel

--------------------------------------------------------------------------------
-- Circuit pressurized - time given
--------------------------------------------------------------------------------

node circuit_pressurized (time_base, EV : bool)
returns (circuit_pressurized : bool);

var depressurize : bool;
    not_init : bool;
    end_delay_1, end_delay_2, never_EV : bool;

let
  not_init = false fby true;
  never_EV = never(EV);
  depressurize = not_init and (not never_EV and not EV);

  end_delay_1 = end_delay (time_base, EV, 3*20);
  end_delay_2 = end_delay (time_base, depressurize, 3*36);
  circuit_pressurized = end_delay_1 and not end_delay_2;
tel

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-- Digital part

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

node computing_module (time_base, handle_up, handle_down,
                      gear_extended, gear_retracted, gear_shock_absorber,
                      door_closed, door_open,
                      analogical_switch, circuit_pressurized : bool)
returns (general_EV, close_EV, open_EV, retract_EV, extend_EV, detect_anomaly : bool);
var handle_move, outgoing, retraction,
    pressure_problem, door_blocked, gear_blocked : bool;
    not_init : bool;
    pressure_problem_1, pressure_problem_2, pre_retraction, pre_outgoing,
    door_blocked_1, door_blocked_2, door_blocked_3, door_blocked_4,
    gear_blocked_1, gear_blocked_2, gear_blocked_3, gear_blocked_4 : bool;
let

-- etats admissibles
 
  assert not (handle_up and handle_down);
  assert not (door_closed and door_open);
  assert not (gear_extended and gear_retracted);
  -- assert implies (false -> pre(not (gear_extended or gear_retracted)), true -> pre (door_open));

  handle_move = handle_up or handle_down;

-- elaboration commande

  open_EV = general_EV and circuit_pressurized
  and (outgoing  and gear_retracted
       or retraction and gear_extended);

  extend_EV = general_EV and circuit_pressurized
  and (outgoing and door_open and not gear_extended);

  close_EV = general_EV and circuit_pressurized
  and (outgoing and gear_extended and not door_closed
       or retraction and gear_retracted and not door_closed);

  retract_EV = general_EV and circuit_pressurized
  and (retraction and door_open and (gear_shock_absorber and not gear_retracted
                                     or not gear_shock_absorber));

  not_init = false fby true;
  general_EV = not_init and (outgoing or retraction) and analogical_switch;

  outgoing = if (gear_extended and door_closed) then false
             else if handle_down then true
                  else if handle_up then false    
             else pre_outgoing;
  pre_outgoing = false fby outgoing;

  retraction = if (gear_retracted and door_closed) then false
               else if handle_up then true
               else if handle_down then false
               else pre_retraction;
  pre_retraction = false fby retraction;

-- monitoring

  pressure_problem_1 = end_delay (time_base, general_EV, 3*20);
  pressure_problem_2 = end_delay (time_base, not general_EV, 3*100);
  pressure_problem = pressure_problem_1 and
                     not circuit_pressurized or
                     pressure_problem_2 and circuit_pressurized;

  door_blocked_1 = end_delay (time_base, open_EV, 5);
  door_blocked_2 = end_delay (time_base, open_EV, 3*20);
  door_blocked_3 = end_delay (time_base, close_EV, 3*5);
  door_blocked_4 = end_delay (time_base, close_EV, 3*20);
  door_blocked = door_blocked_1 and door_closed or
                 door_blocked_2 and not door_open or
                 door_blocked_3 and door_open or
                 door_blocked_4 and not door_closed;

  gear_blocked_1 = end_delay (time_base, retract_EV, 3*5);
  gear_blocked_2 = end_delay (time_base, retract_EV, 3*100);
  gear_blocked_3 = end_delay (time_base, extend_EV, 3*5);
  gear_blocked_4 = end_delay (time_base, extend_EV, 3*100);
  gear_blocked = gear_blocked_1 and gear_extended or
                 gear_blocked_2 and not gear_retracted or
                 gear_blocked_3 and gear_retracted or
                 gear_blocked_4 and not gear_extended;
 
  detect_anomaly = door_blocked or gear_blocked or pressure_problem;

tel

--------------------------------------------------------------------------------

node test (handle_up, handle_down, gear_shock_absorber: bool)
returns (closed_ana, general_EV, circuit_pressurized,
         extend_EV, retract_EV, gear_extended, gear_maneuvring, gear_retracted,
         close_EV, open_EV, door_closed, door_maneuvring, door_open : bool);
var anomaly, time_base : bool;
    pre_open_EV, pre_close_EV : bool;
    pre_extend_EV, pre_retract_EV : bool;
    pre_circuit_pressurized : bool;
 
let

  time_base = true;

  closed_ana = analogical_switch (time_base, handle_up, handle_down);
  
  circuit_pressurized = circuit_pressurized (time_base, general_EV);
  pre_circuit_pressurized = false fby circuit_pressurized;

  (general_EV, close_EV, open_EV, retract_EV,
   extend_EV, anomaly) = computing_module (time_base, handle_up, handle_down,
                                           gear_extended, gear_retracted,
                                           gear_shock_absorber,
                                           door_closed, door_open,
                                           closed_ana, pre_circuit_pressurized);
  (gear_extended, gear_retracted) = cylinder (time_base,
                                    pre_extend_EV, pre_retract_EV, true,
                                    3*4, 3*16, 3*4, 3*8, 3*20, 3*8);
  (door_open, door_closed) = cylinder (time_base,
                             pre_open_EV, pre_close_EV, false,
                             1, 3*12, 3*8, 3*12, 3*12, 3*12);

  gear_maneuvring = not (gear_extended or gear_retracted);
  door_maneuvring = not (door_open or door_closed);

  pre_open_EV = false fby open_EV;
  pre_close_EV = false fby close_EV;
  pre_extend_EV = false fby extend_EV;
  pre_retract_EV = false fby retract_EV;
tel

node system (time_base, handle_up, handle_down, gear_shock_absorber: bool)
returns (closed_ana, general_EV, circuit_pressurized,
         extend_EV, retract_EV, gear_extended, gear_maneuvring, gear_retracted,
         close_EV, open_EV, door_closed, door_maneuvring, door_open,
         anomaly : bool);
var pre_open_EV, pre_close_EV : bool;
    pre_extend_EV, pre_retract_EV : bool;
    pre_circuit_pressurized : bool;
 
let

  closed_ana = analogical_switch (time_base, handle_up, handle_down);
  
  circuit_pressurized = circuit_pressurized (time_base, general_EV);
  pre_circuit_pressurized = false fby circuit_pressurized;

  (general_EV, close_EV, open_EV, retract_EV,
   extend_EV, anomaly) = computing_module (time_base, handle_up, handle_down,
                                           gear_extended, gear_retracted,
                                           gear_shock_absorber,
                                           door_closed, door_open,
                                           closed_ana, pre_circuit_pressurized);
  (gear_extended, gear_retracted) = cylinder(time_base,
                                    pre_extend_EV, pre_retract_EV, true,
                                    3*4, 3*16, 3*4, 3*8, 3*20, 3*8);
  (door_open, door_closed) = cylinder (time_base,
                             pre_open_EV, pre_close_EV, false,
                             1, 3*12, 3*8, 3*12, 3*12, 3*12);

  gear_maneuvring = not (gear_extended or gear_retracted);
  door_maneuvring = not (door_open or door_closed);

  pre_open_EV = false fby open_EV;
  pre_close_EV = false fby close_EV;
  pre_extend_EV = false fby extend_EV;
  pre_retract_EV = false fby retract_EV;
tel

node verify (time_base, handle_up, handle_down, gear_shock_absorber : bool)
returns (ok : bool);

var R11, R12,
    general_EV, circuit_pressurized,
    extend_EV, retract_EV, gear_extended, gear_maneuvring, gear_retracted,
    close_EV, open_EV, door_closed, door_maneuvring, door_open, open_ana,
    anomaly, handle_move : bool;
    R11_a, R11_b, R12_a, R12_b : bool;

let

  handle_move = handle_up or handle_down;
 
  (general_EV, circuit_pressurized,
   extend_EV, retract_EV, gear_extended, gear_maneuvring, gear_retracted,
   close_EV, open_EV, door_closed, door_maneuvring, door_open,
   open_ana, anomaly) = system (time_base, handle_up, handle_down,
                                gear_shock_absorber);
  -- temporal propreties
 
  R11_a = end_delay_last (time_base, handle_up, 3*140);
  R11_b = since_last_never (handle_up, handle_down);
  R11 = implies (R11_a and R11_b, door_closed and gear_retracted);

  R12_a = end_delay_last (time_base, handle_down, 3*150);
  R12_b = since_last_never (handle_down, handle_up);
  R12 = implies (R12_a and R12_b, door_closed and gear_extended);

  ok = R11 and R12;

tel

