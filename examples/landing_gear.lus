(*
   2014 marion scoazec.

   model of the landing gear subsystem.

   communications in computer and information science, volume 433, 2014
   "abz 2014: the landing gear case study", proceedings of the case study
   track of the 4th international conference on abstract vstate machines,
   alloy, b, tla, vdm, and z, toulouse, france, june 2-6, 2014.
   (eds.) frédéric boniol, virginie wiels, yamine ait ameur,
   klaus-dieter schewe
*)


-- true if the last occurence of start arrived after time
node end_delay_last (time_base, start : bool; time : int)
returns (ended : bool);
var x_c : int;
let
  assert (x_c < 400);
  x_c = 0 -> (if start then 0
              else (0 fby x_c) + (if time_base then 1 else 0));
  ended = x_c = time;
tel

node end_delay (time_base, started : bool; time : int)
returns (ended : bool);
var x_d : int;
let
  x_d = 0 -> (if started and not (true fby started) then 0
              else (0 fby x_d) + (if started and time_base then 1 else 0));
  ended = started and x_d >= time;
tel

node since_last_never (a, b : bool) returns (since_last_a_never_b : bool);
let
  since_last_a_never_b = if a then true
                         else if b then false
                         else (true fby since_last_a_never_b);
tel

node implies (a, b : bool)
returns (aimpliesb : bool);
let
  aimpliesb = not a or a and b;
tel

node alternate (a, b : bool) returns (ok : bool);
var attentea, attenteb : bool;
let
  attenteb = true -> (if a then true
                      else if b then false
                      else (false fby attenteb));
  attentea = true -> (if b then true
                      else if a then false
                      else (false fby attentea));
  ok = not (a and b) and
    (not (not (false fby attenteb) and b) or (not (false fby attentea) and a));
tel

node never (b : bool) returns (never : bool);
let
  never = if b then false else (true fby never);
tel


-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------

-- analogical switch - time given

-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------

-- the time base is the third of 0.1 second
-- -----------------------------------------------------------------------------

node analogical_switch_all_outputs (time_base, handle_up, handle_down : bool)
returns (x_a : int; vopen, closing, opening, closed : bool);
var handle_move : bool; position : int;
let

  handle_move = handle_up or handle_down;

  vopen = true -> (((false fby vopen) and (0 fby x_a) = 0) or (false fby opening) and ((0 fby x_a) >= 3*12)
                   and not handle_move);

  closing = (false fby closing) and ((0 fby x_a) < 3*8)
            or (((false fby opening) or (false fby vopen)) and handle_move);

  closed = false -> ((false fby closed) and (handle_move or ((0 fby x_a) < 3*200))
                     or (false fby closing) and ((0 fby x_a) >= 3*8));

  opening = ((false fby opening) and ((0 fby x_a) < 3*12 - 2*position)
             or (false fby closed) and ((0 fby x_a) >= 3*200)) and not handle_move;

  x_a =
    if vopen
       or closing and ((false fby vopen) or (false fby opening))
       or closed  and ((false fby closing) or handle_move)
       or opening and (false fby closed)
    then 0
    else if time_base then (0 fby x_a) + 1
         else (0 fby x_a);

   position = if (false fby opening) and (false fby closing) then (0 fby x_a) else 0;
tel

node analogical_switch (time_base, handle_up, handle_down : bool)
returns (closed : bool);
var x_b : int; vopen, closing, opening : bool;

let

  (x_b, vopen, closing, opening,
   closed) = analogical_switch_all_outputs (time_base, handle_up, handle_down);

tel

-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------

-- cylinders - time given

-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------

node cylinder_all_outputs (time_base, pressure_up, pressure_down, i : bool;
                           -- i is true if the vinitial position is up
                           time_unlock_down, time_down_to_up,
                           time_lock_up, time_unlock_up,
                           time_up_to_down, time_lock_down : int)
returns (down, down_to_up, up, up_to_down : bool;
         x : int);
var condition : bool;
let
  
  condition = false fby (x >= 100);
  
  down = not i -> (((false fby up_to_down) and pressure_down and
                    ((0 fby x) >= time_up_to_down)
                    or (false fby down) and not pressure_up));

  down_to_up = false -> ((false fby down) and pressure_up
                         or (false fby up_to_down) and pressure_up
                         or (false fby down_to_up) and not pressure_down and
                         (not pressure_up or ((0 fby x) < time_down_to_up)));
   
  up = i -> (((false fby down_to_up) and pressure_up and ((0 fby x) >= time_down_to_up)
              or (false fby up) and not pressure_down));

  up_to_down = false -> ((false fby up) and pressure_down
                         or (false fby down_to_up) and pressure_down
                         or (false fby up_to_down) and not pressure_up and
                         (not pressure_down or ((0 fby x) < time_up_to_down)));

  x = 0 -> (if down and (false fby up_to_down)
            or up and (false fby down_to_up)
            or down_to_up and (false fby up_to_down)
            or up_to_down and (false fby down_to_up)
            or down_to_up and (false fby down)
            or up_to_down and (false fby up)
            then 0
            else if (pressure_down and up_to_down)
            or (pressure_up and down_to_up) and time_base
                 then (0 fby x) + 1 
            else (0 fby x));

tel

node cyl_test (pressure_up, pressure_down, vinit_up : bool;
               time_unlock_down, time_down_to_up, time_lock_up,
               time_unlock_up, time_up_to_down, time_lock_down : int)
returns (locked_up, locked_down, down_to_up, up_to_down : bool; x : int);
var time_base : bool;

let

  time_base = true;
 
  (locked_down, down_to_up, locked_up, up_to_down,
   x) = cylinder_all_outputs (time_base, pressure_up, pressure_down, vinit_up,
                              time_unlock_down, time_down_to_up,
                              time_lock_up, time_unlock_up,
                              time_up_to_down, time_lock_down);
tel

node cylinder (time_base, pressure_up, pressure_down, vinit_up : bool;
               time_unlock_down, time_down_to_up, time_lock_up,
               time_unlock_up, time_up_to_down, time_lock_down : int)
returns (locked_up, locked_down : bool);
var down_to_up, up_to_down : bool; x : int;

let
 
  (locked_down, down_to_up, locked_up, up_to_down,
   x) = cylinder_all_outputs (time_base, pressure_up, pressure_down, vinit_up,
                              time_unlock_down, time_down_to_up,
                              time_lock_up, time_unlock_up,
                              time_up_to_down, time_lock_down);
tel

-- -----------------------------------------------------------------------------
-- circuit pressurized - time given
-- -----------------------------------------------------------------------------

node circuit_pressurized (time_base, ev : bool)
returns (circuit_pressurized : bool);
var depressurize : bool;
let
  depressurize = false -> not never(ev) and not ev;

  circuit_pressurized = end_delay(time_base, ev, 3*20)
                        and not  end_delay(time_base, depressurize, 3*36);
tel

-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------

-- digital part

-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------

node computing_module (time_base, handle_up, handle_down,
                      gear_extended, gear_retracted, gear_shock_absorber,
                      door_closed, door_open,
                      analogical_switch, circuit_pressurized : bool)
returns (general_ev, close_ev, open_ev, retract_ev, extend_ev, detect_anomaly : bool);
var handle_move, outgoing, retraction,
    pressure_problem, door_blocked, gear_blocked : bool;
let

-- etats admissibles
  assert not (handle_up and handle_down);
  assert not (door_closed and door_open);
  assert not (gear_extended and gear_retracted);
  -- assert implies (false -> pre(not (gear_extended or gear_retracted)), true -> pre (door_open));

  handle_move = handle_up or handle_down;

-- elaboration commande

  open_ev = general_ev and circuit_pressurized
  and (outgoing  and gear_retracted
       or retraction and gear_extended);

  extend_ev = general_ev and circuit_pressurized
  and (outgoing and door_open and not gear_extended);

  close_ev = general_ev and circuit_pressurized
  and (outgoing and gear_extended and not door_closed
       or retraction and gear_retracted and not door_closed);

  retract_ev = general_ev and circuit_pressurized
  and (retraction and door_open and (gear_shock_absorber and not gear_retracted
                                     or not gear_shock_absorber));

  general_ev = false -> (outgoing or retraction) and analogical_switch;

  outgoing = if (gear_extended and door_closed) then false
             else if handle_down then true
                  else if handle_up then false    
             else (false fby outgoing);

  retraction = if (gear_retracted and door_closed) then false
               else if handle_up then true
               else if handle_down then false
               else (false fby retraction);

-- monitoring

  pressure_problem = end_delay (time_base, general_ev, 3*20) and
    not circuit_pressurized or
    end_delay (time_base, not general_ev, 3*100) and circuit_pressurized;

  door_blocked = end_delay (time_base, open_ev, 5) and door_closed or
    end_delay (time_base, open_ev, 3*20) and not door_open or
    end_delay (time_base, close_ev, 3*5) and door_open or
    end_delay (time_base, close_ev, 3*20) and not door_closed;

  gear_blocked = end_delay (time_base, retract_ev, 3*5) and gear_extended or
    end_delay (time_base, retract_ev, 3*100) and not gear_retracted or
    end_delay (time_base, extend_ev, 3*5) and gear_retracted or
    end_delay (time_base, extend_ev, 3*100) and not gear_extended;
 
  detect_anomaly = door_blocked or gear_blocked or pressure_problem;

tel

-- -----------------------------------------------------------------------------

node test (handle_up, handle_down, gear_shock_absorber: bool)
returns (closed_ana, general_ev, circuit_pressurized,
         extend_ev, retract_ev, gear_extended, gear_maneuvring, gear_retracted,
         close_ev, open_ev, door_closed, door_maneuvring, door_open : bool);
var anomaly, time_base : bool;
 
let

  time_base = true;

  closed_ana = analogical_switch (time_base, handle_up, handle_down);
  
  circuit_pressurized = circuit_pressurized (time_base, general_ev);

  (general_ev, close_ev, open_ev, retract_ev,
   extend_ev, anomaly) = computing_module (time_base, handle_up, handle_down,
                                           gear_extended, gear_retracted,
                                           gear_shock_absorber,
                                           door_closed, door_open,
                                           closed_ana, (false fby circuit_pressurized));
  (gear_extended, gear_retracted) = cylinder (time_base,
                                    false fby extend_ev, false fby retract_ev, true,
                                    3*4, 3*16, 3*4, 3*8, 3*20, 3*8);
  (door_open, door_closed) = cylinder (time_base,
                             false fby open_ev, false fby close_ev, false,
                             1, 3*12, 3*8, 3*12, 3*12, 3*12);

  gear_maneuvring = not (gear_extended or gear_retracted);
  door_maneuvring = not (door_open or door_closed);
tel

node system (time_base, handle_up, handle_down, gear_shock_absorber: bool)
returns (closed_ana, general_ev, circuit_pressurized,
         extend_ev, retract_ev, gear_extended, gear_maneuvring, gear_retracted,
         close_ev, open_ev, door_closed, door_maneuvring, door_open,
         anomaly : bool);
let

  closed_ana = analogical_switch (time_base, handle_up, handle_down);
  
  circuit_pressurized = circuit_pressurized (time_base, general_ev);

  (general_ev, close_ev, open_ev, retract_ev,
   extend_ev, anomaly) = computing_module (time_base, handle_up, handle_down,
                                           gear_extended, gear_retracted,
                                           gear_shock_absorber,
                                           door_closed, door_open,
                                           closed_ana, (false fby circuit_pressurized));
  (gear_extended, gear_retracted) = cylinder(time_base,
                                    (false fby extend_ev), (false fby retract_ev), true,
                                    3*4, 3*16, 3*4, 3*8, 3*20, 3*8);
  (door_open, door_closed) = cylinder (time_base,
                             (false fby open_ev), (false fby close_ev), false,
                             1, 3*12, 3*8, 3*12, 3*12, 3*12);

  gear_maneuvring = not (gear_extended or gear_retracted);
  door_maneuvring = not (door_open or door_closed);
tel

node verify (time_base, handle_up, handle_down, gear_shock_absorber : bool)
returns (ok : bool);

var r11, r12,
    general_ev, circuit_pressurized,
    extend_ev, retract_ev, gear_extended, gear_maneuvring, gear_retracted,
    close_ev, open_ev, door_closed, door_maneuvring, door_open, open_ana,
    anomaly, handle_move : bool;

let

  handle_move = handle_up or handle_down;
 
  (general_ev, circuit_pressurized,
   extend_ev, retract_ev, gear_extended, gear_maneuvring, gear_retracted,
   close_ev, open_ev, door_closed, door_maneuvring, door_open,
   open_ana, anomaly) = system (time_base, handle_up, handle_down,
                                gear_shock_absorber);
  -- temporal propreties
 
  r11 = implies (end_delay_last (time_base, handle_up, 3*140) and
                 since_last_never (handle_up, handle_down), door_closed and gear_retracted);

  r12 = implies (end_delay_last (time_base, handle_down, 3*150) and
                 since_last_never (handle_down, handle_up), door_closed and gear_extended);

  ok = r11 and r12;

tel

