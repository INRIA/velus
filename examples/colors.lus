(**
 * Adaptation of pattern matching example
 * From the Pouzet, Lucid Synchrone Manual V3
 * Section 1.4.2
*)

type color = Blue | Red | Green
type dir = Immobile | Clockwise | Anticlockwise | Undet

node direction(i : color) returns (d : dir)
var pi, ppi : color;
let
    pi = i fby i;
    ppi = i fby pi;
    switch i
    | Blue do
        d = case pi of
            (Blue => if ppi = Blue then Immobile else Undet)
            (Red => Clockwise)
            (Green => Anticlockwise);
    | Red do
        d = case i of
            (Red => if ppi = Red then Immobile else Undet)
            (Green => Clockwise)
            (Blue => Anticlockwise);
    | Green do
        d = case i of
            (Green => if ppi = Green then Immobile else Undet)
            (Red => Anticlockwise)
            (Blue => Clockwise);
    end
tel
