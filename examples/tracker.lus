node counter (ini:int; inc:int; rest:bool) returns (n:int)
let
  n = if rest then ini else ((0 fby n) + inc);
tel

node d_integrator(gamma: int)
returns (speed, position: int)
let
  speed = counter(0, gamma, false);
  position = counter(0, speed, false);
tel

node rising(s: bool) returns (edge: bool)
let
    edge = not (true fby s) and s;
tel

node tracker(acc, limit: int) returns (p, t: int)
var s : int; x : bool;
let
  x = rising(s > limit);
  (s, p) = d_integrator(acc);
  t = merge x 
            (true => counter(1 when x, 1 when x, false when x))
            (false => (0 fby t) when not x);
tel

