node fby_var (x : int) returns (y : int)
var t : int;
let
  t = 0 fby t; (* Should not expand *)
  y = t;
tel

node fby_out (x : int) returns (y : int)
let
  y = 0 fby y; (* Should expand because y is an output *)
tel

node fby_init1 (x : int) returns (y : int)
let
  y = x fby (y + x); (* Should introduce an init equation on base clock *)
tel

node fby_init2 (x : int) returns (y : int; z : int)
let
  (y, z) = (x, x) fby (y + x, z + x);
tel

node fby_init3 (b1 : bool; b2 : bool when b1; x : int) returns (y1 : int when b2; y2 : int when b2; z : int)
let
  y1 = ((x when b1 when b2) fby 1);
  y2 = ((x when b1 when b2) fby 2);
  z = x fby 42;
tel

node fby_fby (X : int) returns (y : int)
let
  y = 0 fby (1 fby y);
tel

node fby_tuple1 (x : int) returns (y : int; z : int)
let
  (y, z) = (0, 0) fby (z, y);
tel

node fby_tuple2 (x : int) returns (y : int; z : int)
let
  (y, z) = (0 fby z, 0 fby y);
tel