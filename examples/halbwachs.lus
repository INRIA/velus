(* lustre examples from "synchronous programming of reactive systems",
   nicolas halbwachs, 1993 kluwer academic publishers. *)

node counter(vinit_value, incr_value: int; vreset: bool)
   returns (n: int);
let
   n = vinit_value -> (if vreset then vinit_value
                       else (0 fby n) + incr_value);
tel

node watchdog1 (set, vreset, deadline: bool)
   returns (alarm: bool);
var watchdog_is_on: bool;
let
   alarm = deadline and watchdog_is_on;
   watchdog_is_on = false -> (if set then true
                              else if vreset then false
                              else (false fby watchdog_is_on));
   assert not(set and vreset);
tel

node edge (b: bool) returns (edge: bool);
let
   edge = false -> (b and not (false fby b));
tel

node watchdog2 (set, vreset: bool; delay: int)
   returns (alarm: bool);
var remaining_delay: int; deadline: bool;
let
   alarm = watchdog1(set, vreset, deadline);
   deadline = edge(remaining_delay = 0);
   remaining_delay = if set then delay
                     else (0 fby (remaining_delay - 1));
tel

node simple_stopwatch (start_stop, vreset, hs: bool)
   returns (time: int; running: bool);
let
  time = 0 -> (if hs and running then (0 fby time) + 1
               else if vreset then 0 else (0 fby time));
  running = false -> (if start_stop
                      then not (false fby running)
                      else (false fby running));
tel

node stopwatch (start_stop, vreset, hs: bool)
   returns (displayed_time: int; running, frozen: bool);
var internal_time: int; actual_vreset: bool;
let
  frozen = false ->
              (if vreset and (false fby running) then true
               else if vreset and (false fby frozen) then false
                    else (false fby frozen));
  displayed_time =
    merge frozen
          (true -> (0 fby displayed_time) when frozen)
          (false -> internal_time when not frozen);
  (internal_time, running) =
      simple_stopwatch(start_stop, actual_vreset, hs);
  actual_vreset =
      vreset and false fby (not running and not frozen);
tel

node switch_1(von, voff, vinit: bool) returns (vstate: bool);
let
   vstate = vinit -> (if von then true
                      else if voff then false
                      else (false fby vstate));
tel

node nswitch(von, voff, vinit: bool) returns (vstate: bool);
let
   vstate = vinit -> (if von and not (false fby vstate) then true
                      else if voff and (false fby vstate) then false
                      else (false fby vstate));
tel

node compare(von, voff, vinit: bool) returns (ok: bool);
var vstate, vstate_1 : bool;
let
   vstate = nswitch(von, voff, vinit);
   vstate_1 = switch_1(von, voff, vinit);
   ok = (vstate = vstate_1);
   assert not(von and voff);
tel

node watchdog3 (set, vreset, time_unit: bool;
                delay: int)
   returns (alarm: bool);
var clock: bool;
let
   alarm = merge clock
                 (true -> watchdog2(set when clock,
                                    vreset when clock,
                                    delay when clock)) 
                 (false -> (false fby alarm) when not clock);
   clock = true -> set or vreset or time_unit;
tel

