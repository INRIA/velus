(* Lustre examples from "Synchronous Programming of Reactive Systems",
   Nicolas Halbwachs, 1993 Kluwer Academic Publishers. *)

node COUNTER(init_value, incr_value: int; reset: bool)
   returns (N: int);
var init : bool; pre_N : int;
let
   init = true fby false;
   pre_N = 0 fby N;
   N = if reset or init then init_value
       else pre_N + incr_value;
tel

node WATCHDOG1 (set, reset, deadline: bool)
   returns (alarm: bool);
var watchdog_is_on: bool;
    pre_watchdog_is_on, init: bool;
let
   init = true fby false;
   alarm = deadline and watchdog_is_on;
   watchdog_is_on =
      if init then false
      else if set then true
      else if reset then false
      else pre_watchdog_is_on;
   pre_watchdog_is_on = false fby watchdog_is_on;
   assert not(set and reset);
tel

node EDGE (b: bool) returns (edge: bool);
var pre_b : bool;
let
   pre_b = true fby b;
   edge = b and not pre_b;
tel

node WATCHDOG2 (set, reset: bool; delay: int)
   returns (alarm: bool);
var remaining_delay: int; deadline: bool;
    pre_remaining_delay: int;
let
   alarm = WATCHDOG1(set, reset, deadline);
   deadline = EDGE(remaining_delay = 0);
   remaining_delay = if set then delay else
                     pre_remaining_delay;
   pre_remaining_delay = 0 fby (remaining_delay - 1);
tel

node WATCHDOG3 (set, reset, time_unit: bool;
                delay: int)
   returns (alarm: bool);
var clock: bool;
    init, pre_alarm : bool;
    r : bool when clock;
let
   r = WATCHDOG2(set when clock,
                 reset when clock,
                 delay when clock);
   alarm = merge clock r (pre_alarm when not clock);
   pre_alarm = false fby alarm;
   clock = init or set or reset or time_unit;
   init = true fby false;
tel

node Simple_Stopwatch (start_stop, reset, hs: bool)
   returns (time: int; running: bool);
var init, pre_running : bool;
    pre_time : int;
let
  init = true fby false;
  time =
    if init then 0
    else if hs and running then pre_time + 1
    else if reset then 0 else pre_time;
  pre_time = 0 fby time;
  running = if init then false
            else if start_stop then not pre_running
            else pre_running;
  pre_running = false fby running;
tel

node Stopwatch (start_stop, reset, hs: bool)
   returns (displayed_time: int; running, frozen: bool);
var internal_time: int; actual_reset: bool;
    init, pre_running, pre_frozen, r: bool;
    pre_displayed_time: int;
let
  init = true fby false;
  frozen = if init then false
           else if reset and pre_running then true
           else if reset and pre_frozen then false
           else pre_frozen;
  displayed_time =
           merge frozen
                 (pre_displayed_time when frozen)
                 (internal_time when not frozen);
  pre_displayed_time = 0 fby displayed_time;
  (internal_time, running) =
      Simple_Stopwatch(start_stop, actual_reset, hs);
  actual_reset = reset and r;

  r = true fby (not running and not frozen);
  pre_running = false fby running;
  pre_frozen = false fby frozen;
tel

node SWITCH_1(ON, OFF, INIT: bool) returns (STATE: bool);
var first, pre_STATE : bool;
let
   first = true fby false;
   STATE = if first then INIT
           else if ON then true
           else if OFF then false
           else pre_STATE;
   pre_STATE = false fby STATE;
tel

node SWITCH(ON, OFF, INIT: bool) returns (STATE: bool);
var first, pre_STATE : bool;
let
   first = true fby false;
   STATE = if first then INIT
           else if ON and not pre_STATE then true
           else if OFF and pre_STATE then false
           else pre_STATE;
   pre_STATE = false fby STATE;
tel

node COMPARE(ON, OFF, INIT: bool) returns (OK: bool);
var state, state_1 : bool;
let
   state = SWITCH(ON, OFF, INIT);
   state_1 = SWITCH_1(ON, OFF, INIT);
   OK = (state = state_1);
   assert not(ON and OFF);
tel

