(* kind2-mc/cocospec_tcm_experiments/systems/cocospec_mono_system.lus
   2015 adrien champion *)

node max(fst, snd: real) returns (vout: real) ;
let
  vout = if fst >= snd then fst else snd ;
tel

node min(fst, snd: real) returns (vout: real) ;
let
  vout = if fst <= snd then fst else snd ;
tel

node duration(vin: bool) returns (vout: int) ;
var always_true, pre_always_true: bool; pout: int ;
let
  pre_always_true = true fby always_true ;
  always_true = vin and pre_always_true ;
  pout = 1 fby (vout + 1) ;
  vout = if always_true then pout else 0 ;
tel

node fall(vin: bool) returns (vout: bool) ;
var pre_vin: bool;
let
  pre_vin = false fby vin ;
  vout = (not vin) and pre_vin ;
tel

node rise(vin: bool) returns (vout: bool) ;
var pre_not_vin : bool;
let
  pre_not_vin = false fby (not vin) ;
  vout = vin and pre_not_vin ;
tel

node count(vin: bool) returns (vout: int) ;
var pout: int ;
let
  pout = 1 fby (vout + 1);
  vout = if vin then pout else 0 ;
tel

node count_succ_true(vin: bool) returns (vout: int) ;
var pout: int ;
let
  pout = 1 fby (vout + 1);
  vout = if vin then pout else 0 ;
tel

node count_true_since(vin, vreset: bool) returns (vout: int) ;
var pout: int ;
let
  pout = 0 fby vout;
  vout = if vreset then 0 else if vin then pout + 1 else pout ;
tel

node has_been_true(vin: bool) returns (vout: bool) ;
var pout: bool;
let
  pout = false fby vout ;
  vout = vin or pout ;
tel

node has_been_true_vreset(vin, vreset: bool) returns (vout: bool) ;
var pout: bool;
let
  pout = false fby vout ;
  vout = (vin or pout) and not vreset ;
tel

node since(vin: bool) returns (vout: int) ;
var pout: int;
let
  pout = 0 fby vout ;
  vout = if vin then (pout + 1) else 0 ;
tel

node spike_or_confirmed(vin: bool ; count: int ; vreset: bool)
returns (vout: bool) ;
var has_been_true: bool; since_in: int ;
let
  has_been_true = has_been_true_vreset(since_in = count, vreset) ;
  since_in = since(vin) ;
  vout = (vin and not vreset) or has_been_true ;
tel

node before_lt(max: int) returns (vout: bool) ;
var d: int ;
let
  d = duration(true) ;
  vout = d < max ;
tel

node after_ge(min: int) returns (vout: bool) ;
var d: int;
let
  d = duration(true) ;
  vout = d >= min ;
tel

node since_le_not_0(vin: bool; max: int) returns (vout: bool) ;
var sinc3: int ;
let
  sinc3 = since(vin) ;
  vout = (0 < sinc3) and (sinc3 <= max) ;
tel

node since_gt_or_0(vin: bool; min: int) returns (vout: bool) ;
var sinc3: int ;
let
  sinc3 = since(vin) ;
  vout = (0 = sinc3) or (sinc3 > min) ;
tel

node lasted(vin: bool) returns (vout: int) ;
var pout: int;
let
  pout = 0 fby vout ;
  vout = if vin then pout + 1 else 0 ;
tel

node f_t_t_t(i1, i2, i3, i4: bool) returns (vout: bool) ;
let
  vout = (not i1) and i2 and i3 and i4 ;
tel

node t_f_t_t(i1, i2, i3, i4: bool) returns (vout: bool) ;
let
  vout = i1 and (not i2) and i3 and i4 ;
tel

node abs(vin: real) returns (vout: real) ;
let
  vout = if vin < 0.0 then -vin else vin ;
tel

node clamp(l_bound, vin, u_bound: real) returns (vout: real) ;
let
  vout =
    if vin < l_bound then l_bound else if vin > u_bound then u_bound else vin ;
tel

node right (heading, cmd: real) returns (vout: bool) ;
let
  vout = (
    ((cmd - heading) > 0.0) and
    ((cmd - heading) < 180.0)
  ) ;
tel

node left (heading, cmd: real) returns (vout: bool) ;
let
  vout = (
    ((cmd - heading) < 0.0) and
    ((cmd - heading) > - 180.0)
  ) ;
tel

node sign(vin: real) returns (vout: bool) ;
let
  vout = vin >= 0.0 ;
tel

node pseudocontinuous (vin, inc: real) returns (vout: bool) ;
var pre_vin, absv: real; vinit: bool;
let
  pre_vin = 0.0 fby vin;
  vinit = true fby false;
  absv = abs(vin - pre_vin);
  vout = if vinit then 0 <= inc else absv <= inc ;
tel

-- |===| abstractions of non-linear streams.

node times(x, y: real) returns (z: real) ;
let
  z = x * y ;
tel

node divid(num, den: real) returns (res: real) ;
let
  res = num / den ;
tel

(* division with some bounds on the denominator.
  bounds must be numbers, otherwise the contract is non-linear. *)
node divid_bounded_num(num, den: real ; l_bound, u_bound: real)
returns (res: real) ;
let
  res = num / den ;
tel

node temporal_divid(num, den: real) returns (res: real) ;
let
  res = num / den ;
tel

-- |===| latitudinal_control.lus

node nl_latitudinal_1(in1, in2, in3: real) returns (vout: real) ;
var arg : real;
let
  arg = divid(in1, in2);
  vout = times(in3, arg) ;
tel

node nl_latitudinal_2(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = divid(in1, in2) ;
  vout = times(in3, arg) ;
tel

node nl_latitudinal_3(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = divid(in1, in2) ;
  vout = times(in3, arg) ;
tel

node nl_latitudinal_4(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_5(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_6(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_7(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_8(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_9(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = times(in1, arg) ;
tel

node nl_latitudinal_10(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = times(in1, arg) ;
tel

node nl_latitudinal_11(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = times(in1, arg) ;
tel

node nl_latitudinal_12(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

-- |===| longitudinal_control.lus

node nl_longitudinal_1(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_longitudinal_2(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_longitudinal_3(in1, in2, in3: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_longitudinal_4(in1, in2: real) returns (vout: real) ;
let
  vout = divid(in1, in2) ;
tel

node nl_longitudinal_5(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_6(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_7(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_8(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_9(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3);
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_10(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3);
  vout = divid(in1, arg) ;
tel

-- system nodes
node mode_logic_speedmode (
  activate_1_1, deactivate_1_1 : real;
  alteng_1_1 : bool;
  cas_1_1, cascmdmcp_1_1 : real)
returns (
  ateng_1_1 : bool;
  cascmd_2_1 : real);
var
  add_1_1, add_1_1_a, add_1_1_b : int;
  comparetoconstant_1_1 : bool;
  comparetoconstant1_1_1 : bool;
  logicaloperator_1_1 : bool;
  logicaloperator2_1_1 : bool;
  switch_1_1 : real;
  switch1_1_1 : real;
  srflipfloprepl_dot_glogicaloperator_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator1_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator2_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator3_1_1 : bool;
  srflipfloprepl_dot_gunitdelay_1_1 : bool;
  srflipfloprepl_dot_gunitdelay1_1_1 : bool;
  unitdelay2_1_1 : real;
let 
  add_1_1_a = if comparetoconstant1_1_1 then 1 else 0;
  add_1_1_b = if logicaloperator_1_1 then 1 else 0;
  add_1_1 = add_1_1_a + add_1_1_b;
  comparetoconstant_1_1 = not(deactivate_1_1 = 0.0);
  comparetoconstant1_1_1 = not(activate_1_1 = 0.0);
  logicaloperator_1_1 = alteng_1_1 and srflipfloprepl_dot_glogicaloperator_1_1;
  logicaloperator2_1_1 = comparetoconstant1_1_1 or logicaloperator_1_1;
  switch_1_1 = if add_1_1 >= 0 then unitdelay2_1_1 else switch1_1_1;
  switch1_1_1 = if add_1_1 > 1 then cascmdmcp_1_1 else cas_1_1;
  srflipfloprepl_dot_glogicaloperator_1_1 =
    not(srflipfloprepl_dot_gunitdelay_1_1
        and srflipfloprepl_dot_glogicaloperator3_1_1);
  srflipfloprepl_dot_glogicaloperator1_1_1 =
    not(srflipfloprepl_dot_glogicaloperator2_1_1
        and srflipfloprepl_dot_gunitdelay1_1_1);
  srflipfloprepl_dot_glogicaloperator2_1_1 = not logicaloperator2_1_1;
  srflipfloprepl_dot_glogicaloperator3_1_1 = not comparetoconstant_1_1;
  srflipfloprepl_dot_gunitdelay_1_1 =
    false fby srflipfloprepl_dot_glogicaloperator1_1_1;
  srflipfloprepl_dot_gunitdelay1_1_1 =
    true fby srflipfloprepl_dot_glogicaloperator_1_1;
  unitdelay2_1_1 = 0.0 fby switch_1_1;
  ateng_1_1 = srflipfloprepl_dot_glogicaloperator1_1_1;
  cascmd_2_1 = unitdelay2_1_1;
tel

node mode_logic_headingmode (
  activate_1_1 : real; deactivate_1_1 : bool
) returns (headeng_1_1 : bool) ;
var
  arg : real;
  comparetoconstant_1_1 : bool;
  comparetoconstant1_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator1_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator2_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator3_1_1 : bool;
  srflipfloprepl_dot_gunitdelay_1_1 : bool;
  srflipfloprepl_dot_gunitdelay1_1_1 : bool;
let 
  arg = if deactivate_1_1 then 1.0 else 0.0;
  comparetoconstant_1_1 = not(arg = 0.0);
  comparetoconstant1_1_1 = not(activate_1_1 = 0.0);
  srflipfloprepl_dot_glogicaloperator_1_1 =
    not(srflipfloprepl_dot_gunitdelay_1_1
        and srflipfloprepl_dot_glogicaloperator3_1_1);
  srflipfloprepl_dot_glogicaloperator1_1_1 =
    not(srflipfloprepl_dot_glogicaloperator2_1_1
        and srflipfloprepl_dot_gunitdelay1_1_1);
  srflipfloprepl_dot_glogicaloperator2_1_1 = not comparetoconstant1_1_1;
  srflipfloprepl_dot_glogicaloperator3_1_1 = not comparetoconstant_1_1;
  srflipfloprepl_dot_gunitdelay_1_1 =
    false fby srflipfloprepl_dot_glogicaloperator1_1_1;
  srflipfloprepl_dot_gunitdelay1_1_1 =
    true fby srflipfloprepl_dot_glogicaloperator_1_1;
  headeng_1_1 = srflipfloprepl_dot_glogicaloperator1_1_1;
tel

node mode_logic_altandfpamode (
  activatefpa_1_1 : real;
  deactivate_1_1 : bool;
  altitude_1_1, altcmd_1_1, activatealt_1_1 : real
) returns (alteng_1_1, fpaeng_2_1 : bool);
var
  arg : real;
  abs_1_1 : real;
  add_1_1 : real;
  comparetoconstant_1_1 : bool;
  comparetoconstant1_1_1 : bool;
  comparetoconstant2_1_1 : bool;
  comparetoconstant3_1_1 : bool;
  logicaloperator1_1_1 : bool;
  logicaloperator2_1_1 : bool;
  logicaloperator3_1_1 : bool;
  logicaloperator4_1_1 : bool;
  logicaloperator6_1_1 : bool;
  srflipfloprepl_dot_1_logicaloperator_1_1 : bool;
  srflipfloprepl_dot_1_logicaloperator1_1_1 : bool;
  srflipfloprepl_dot_1_logicaloperator2_1_1 : bool;
  srflipfloprepl_dot_1_logicaloperator3_1_1 : bool;
  srflipfloprepl_dot_1_unitdelay_1_1 : bool;
  srflipfloprepl_dot_1_unitdelay1_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator1_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator2_1_1 : bool;
  srflipfloprepl_dot_glogicaloperator3_1_1 : bool;
  srflipfloprepl_dot_gunitdelay_1_1 : bool;
  srflipfloprepl_dot_gunitdelay1_1_1 : bool;
let 
  abs_1_1 = if add_1_1 >= 0.0 then add_1_1 else -add_1_1;
  add_1_1 = altitude_1_1 - altcmd_1_1;
  arg = if deactivate_1_1 then 1.0 else 0.0;
  comparetoconstant_1_1 = not(arg = 0.0);
  comparetoconstant1_1_1 = not(activatefpa_1_1 = 0.0);
  comparetoconstant2_1_1 = abs_1_1 <= 200.0;
  comparetoconstant3_1_1 = not(activatealt_1_1 = 0.0);
  logicaloperator1_1_1 = logicaloperator2_1_1 or comparetoconstant2_1_1;
  logicaloperator2_1_1 = not srflipfloprepl_dot_glogicaloperator1_1_1;
  logicaloperator3_1_1 =
    srflipfloprepl_dot_glogicaloperator1_1_1 and logicaloperator6_1_1;
  logicaloperator4_1_1 =
    srflipfloprepl_dot_1_logicaloperator1_1_1 and logicaloperator1_1_1;
  logicaloperator6_1_1 =
    not(srflipfloprepl_dot_1_logicaloperator1_1_1 and comparetoconstant2_1_1);
  srflipfloprepl_dot_1_logicaloperator_1_1 =
    not(srflipfloprepl_dot_1_unitdelay_1_1
        and srflipfloprepl_dot_1_logicaloperator3_1_1);
  srflipfloprepl_dot_1_logicaloperator1_1_1 =
    not(srflipfloprepl_dot_1_logicaloperator2_1_1
        and srflipfloprepl_dot_1_unitdelay1_1_1);
  srflipfloprepl_dot_1_logicaloperator2_1_1 = not comparetoconstant3_1_1;
  srflipfloprepl_dot_1_logicaloperator3_1_1 = not comparetoconstant_1_1;
  srflipfloprepl_dot_1_unitdelay_1_1 =
    false fby srflipfloprepl_dot_1_logicaloperator1_1_1;
  srflipfloprepl_dot_1_unitdelay1_1_1 =
    true fby srflipfloprepl_dot_1_logicaloperator_1_1;
  srflipfloprepl_dot_glogicaloperator_1_1 =
    not(srflipfloprepl_dot_gunitdelay_1_1
        and srflipfloprepl_dot_glogicaloperator3_1_1);
  srflipfloprepl_dot_glogicaloperator1_1_1 =
    not(srflipfloprepl_dot_glogicaloperator2_1_1
      and srflipfloprepl_dot_gunitdelay1_1_1);
  srflipfloprepl_dot_glogicaloperator2_1_1 = not comparetoconstant1_1_1;
  srflipfloprepl_dot_glogicaloperator3_1_1 = not comparetoconstant_1_1;
  srflipfloprepl_dot_gunitdelay_1_1 =
    false fby srflipfloprepl_dot_glogicaloperator1_1_1;
  srflipfloprepl_dot_gunitdelay1_1_1 =
    true fby srflipfloprepl_dot_glogicaloperator_1_1;
  alteng_1_1 = logicaloperator4_1_1;
  fpaeng_2_1 = logicaloperator3_1_1;
tel

node mode_logic (
  headmode_1_1, ailstick_1_1, elevstick_1_1, altmode_1_1,
  fpamode_1_1, atmode_1_1, altcmd_1_1, altitude_1_1,
  cas_1_1, cascmdmcp_1_1 : real)
returns (headeng_1_1, alteng_2_1, fpaeng_3_1, ateng_4_1 : bool;
         cascmd_5_1 : real) ;
var
  altandfpamode_1_1 : bool;
  altandfpamode_2_1 : bool;
  comparetozero_1_1 : bool;
  comparetozero1_1_1 : bool;
  constant_1_1 : real;
  headingmode_1_1 : bool;
  logicaloperator_1_1 : bool;
  speedmode_1_1 : bool;
  speedmode_2_1 : real;
let 
  (altandfpamode_1_1, altandfpamode_2_1) =
    mode_logic_altandfpamode(fpamode_1_1, logicaloperator_1_1, altitude_1_1,
                             altcmd_1_1, altmode_1_1);
  comparetozero_1_1 = not(ailstick_1_1 = 0.0);
  comparetozero1_1_1 = not(elevstick_1_1 = 0.0);
  constant_1_1 = 0.0;
  headingmode_1_1 = mode_logic_headingmode(headmode_1_1, logicaloperator_1_1);
  logicaloperator_1_1 = comparetozero_1_1 or comparetozero1_1_1;
  (speedmode_1_1, speedmode_2_1) =
    mode_logic_speedmode(atmode_1_1, constant_1_1, altandfpamode_2_1,
                         cas_1_1, cascmdmcp_1_1);
  headeng_1_1 = headingmode_1_1;
  alteng_2_1 = altandfpamode_1_1;
  fpaeng_3_1 = altandfpamode_2_1;
  ateng_4_1 = speedmode_1_1;
  cascmd_5_1 = speedmode_2_1;
tel

node longitudinal_controller_pitchinnerloop_lookup1d_interpolate1d_sharp_2 (
  in1_1_1, x1_1_1, x2_1_1, y1_1_1, y2_1_1 : real )
returns (out1_1_1 : real) ;
var
  arg : real;
  add1_1_1 : real;
  add2_1_1 : real;
  add3_1_1 : real;
  add4_1_1 : real;
  divide_1_1 : real;
let 
  add1_1_1 =  - x1_1_1 + x2_1_1;
  add2_1_1 = divide_1_1 + y1_1_1;
  add3_1_1 =  - y1_1_1 + y2_1_1;
  add4_1_1 = in1_1_1 - x1_1_1;
  arg = divid(add4_1_1, add1_1_1) ;
  divide_1_1 = times(arg, add3_1_1 ) ;
  out1_1_1 = add2_1_1;
tel

node longitudinal_controller_pitchinnerloop_lookup1d_interpolate1d_sharp_1(
  in1_1_1, x1_1_1, x2_1_1, y1_1_1, y2_1_1 : real)
returns (out1_1_1 : real) ;
var
  arg : real;
  add1_1_1 : real;
  add2_1_1 : real;
  add3_1_1 : real;
  add4_1_1 : real;
  divide_1_1 : real;
let 
  add1_1_1 =  - x1_1_1 + x2_1_1;
  add2_1_1 = divide_1_1 + y1_1_1;
  add3_1_1 =  - y1_1_1 + y2_1_1;
  add4_1_1 = in1_1_1 - x1_1_1;
  arg = divid(add4_1_1, add1_1_1);
  divide_1_1 = times(arg, add3_1_1 ) ;
  out1_1_1 = add2_1_1;
tel

node longitudinal_controller_pitchinnerloop_lookup1d_interpolate1d_sharp_0 (
  in1_1_1, x1_1_1, x2_1_1, y1_1_1, y2_1_1 : real)
returns (out1_1_1 : real) ;
var
  arg : real;
  add1_1_1 : real;
  add2_1_1 : real;
  add3_1_1 : real;
  add4_1_1 : real;
  divide_1_1 : real;
let 
  add1_1_1 =  - x1_1_1 + x2_1_1;
  add2_1_1 = divide_1_1 + y1_1_1;
  add3_1_1 =  - y1_1_1 + y2_1_1;
  add4_1_1 = in1_1_1 - x1_1_1;
  arg = divid(add4_1_1, add1_1_1);
  divide_1_1 = times(arg, add3_1_1 ) ;
  out1_1_1 = add2_1_1;
tel

node longitudinal_controller_pitchinnerloop_lookup1d (in1_1_1 : real)
returns (out1_1_1 : real) ;
var
  add_1_1 : real;
  branch_sharp_1_1_1 : real;
  branch_sharp_2_1_1 : real;
  branch_sharp_3_1_1 : real;
  gte1_1_1 : bool;
  gte2_1_1 : bool;
  gte3_1_1 : bool;
  interpolate1d_sharp_0_1_1 : real;
  interpolate1d_sharp_1_1_1 : real;
  interpolate1d_sharp_2_1_1 : real;
  lte1_1_1 : bool;
  lte2_1_1 : bool;
  lte3_1_1 : bool;
  r1_1_1 : real;
  r2_1_1 : real;
  r3_1_1 : real;
  r4_1_1 : real;
  r5_1_1 : real;
  r6_1_1 : real;
  r7_1_1 : real;
  r8_1_1 : real;
let 
  add_1_1 = branch_sharp_1_1_1 + branch_sharp_2_1_1 + branch_sharp_3_1_1;
  branch_sharp_1_1_1 =
    if lte1_1_1 and gte1_1_1 then interpolate1d_sharp_0_1_1 else 0.0 ;
  branch_sharp_2_1_1 =
    if lte2_1_1 and gte2_1_1 then interpolate1d_sharp_1_1_1 else 0.0 ;
  branch_sharp_3_1_1 =
    if lte3_1_1 and gte3_1_1 then interpolate1d_sharp_2_1_1 else 0.0 ;
  gte1_1_1 = in1_1_1 <= r2_1_1;
  gte2_1_1 = in1_1_1 <= r3_1_1;
  gte3_1_1 = in1_1_1 <= r4_1_1;
  interpolate1d_sharp_0_1_1 =
    longitudinal_controller_pitchinnerloop_lookup1d_interpolate1d_sharp_0(
      in1_1_1, r1_1_1, r2_1_1, r5_1_1, r6_1_1);
  interpolate1d_sharp_1_1_1 =
    longitudinal_controller_pitchinnerloop_lookup1d_interpolate1d_sharp_1(
      in1_1_1, r2_1_1, r3_1_1, r6_1_1, r7_1_1);
  interpolate1d_sharp_2_1_1 =
    longitudinal_controller_pitchinnerloop_lookup1d_interpolate1d_sharp_2(
      in1_1_1, r3_1_1, r4_1_1, r7_1_1, r8_1_1);
  lte1_1_1 = in1_1_1 >= r1_1_1;
  lte2_1_1 = in1_1_1 > r2_1_1;
  lte3_1_1 = in1_1_1 > r3_1_1;
  r1_1_1 = 0.0;
  r2_1_1 = 120.0;
  r3_1_1 = 350.0;
  r4_1_1 = 500.0;
  r5_1_1 = 1.0;
  r6_1_1 = 1.0;
  r7_1_1 = 0.3;
  r8_1_1 = 0.3;
  out1_1_1 = add_1_1;
tel

node longitudinal_controller_pitchinnerloop_transferfunc (u_1_1 : real)
returns (y_1_1 : real) ;
var
  a_sharp_1_1_1 : real;
  b0_sharp_0_1_1 : real;
  b0_sharp_1_1_1 : real;
  delay_sharp_1_1_1 : real;
  output_sum_1_1 : real;
  sample_sharp_1_1_1 : real;
  sum11_1_1 : real;
  sum21_1_1 : real;
let 
  a_sharp_1_1_1 = 0.0625 * delay_sharp_1_1_1;
  b0_sharp_0_1_1 = 1.0 * u_1_1;
  b0_sharp_1_1_1 = -1.0 * a_sharp_1_1_1;
  delay_sharp_1_1_1 = 0.0 fby sum21_1_1;
  output_sum_1_1 = b0_sharp_0_1_1 + b0_sharp_1_1_1;
  sample_sharp_1_1_1 = 0.02 * sum11_1_1;
  sum11_1_1 = u_1_1 - a_sharp_1_1_1;
  sum21_1_1 = sample_sharp_1_1_1 + delay_sharp_1_1_1;
  y_1_1 = output_sum_1_1;
tel

node longitudinal_controller_pitchinnerloop (
  pitchcmd_1_1, pitch_1_1, qdeg_1_1, cas_1_1 : real)
returns (elevcmd_1_1 : real) ;
var
  kpitch_1_1 : real;
  kwo_1_1 : real;
  mux_1_1 : real; mux_1_2 : real;
  product_1_1 : real;
  sum_1_1 : real;
  sum1_1_1 : real;
  transferfunc_1_1 : real;
  lookup1d_1_1 : real;
let 
  kpitch_1_1 = 2.0 * sum_1_1;
  kwo_1_1 = 0.5 * transferfunc_1_1;
  mux_1_1 = pitchcmd_1_1 ;
  mux_1_2 = pitch_1_1 ;
  product_1_1 = times(sum1_1_1, lookup1d_1_1);
  sum_1_1 = pitchcmd_1_1 - pitch_1_1;
  sum1_1_1 =  - kpitch_1_1 + kwo_1_1;
  transferfunc_1_1 =
    longitudinal_controller_pitchinnerloop_transferfunc(qdeg_1_1);
  lookup1d_1_1 = longitudinal_controller_pitchinnerloop_lookup1d(cas_1_1);
  elevcmd_1_1 = product_1_1;
tel

node longitudinal_controller_manualoverride (man_1_1 : real; auto_1_1 : real)
returns (out_1_1 : real) ;
var
  switch1_1_1 : real;
let 
  switch1_1_1 = if man_1_1 <> 0.0 then man_1_1 else auto_1_1 ;
  out_1_1 = switch1_1_1;
tel

node longitudinal_controller_fpacontrol_integrator_vreset (
  f_lpar_x_rpar_g1_1 : real; vreset_level_1_1 : bool; x0_1_1 : real)
returns (f_lpar_x_rpar_g1_1_o : real) ;
var
  vinit : bool;
  add_1_1 : real;
  constant_1_1 : real;
  gain1_1_1 : real;
  product_1_1 : real;
  product1_1_1 : real;
  product2_1_1 : real;
  sum1_1_1 : real;
  sum2_1_1 : real;
  sum3_1_1 : real;
  sum4_1_1 : real;
  delay_sharp_1_1_1 : real;
  delay_sharp_2_1_1 : real;
  delay_sharp_3_1_1 : bool;
  eq0_1_1 : bool;
  ne0_1_1 : bool;
  ne1_1_1 : bool;
  zero_1_1 : real;
  eq0_1_1_a, ne0_1_1_a, ne1_1_1_a : real;
let 
  vinit = true fby false;
  add_1_1 = product1_1_1 + product2_1_1;
  constant_1_1 = 0.0;
  gain1_1_1 = 1.0 * f_lpar_x_rpar_g1_1;
  product_1_1 = if vinit then x0_1_1 else 0.0 ;
  product1_1_1 = if ne0_1_1 then sum3_1_1 else 0.0 ;
  product2_1_1 = if eq0_1_1 and ne1_1_1 then sum3_1_1 else 0.0 ;
  sum1_1_1 = gain1_1_1 + sum2_1_1;
  sum2_1_1 = sum4_1_1 + product_1_1;
  sum3_1_1 =  - delay_sharp_2_1_1 + x0_1_1;
  sum4_1_1 = delay_sharp_2_1_1 + add_1_1;
  delay_sharp_1_1_1 = 1.0;
  delay_sharp_2_1_1 = 0.0 fby sum1_1_1;
  delay_sharp_3_1_1 = false fby vreset_level_1_1;
  eq0_1_1_a =if vreset_level_1_1 then 1.0 else 0.0;
  eq0_1_1 = (eq0_1_1_a = zero_1_1);
  ne0_1_1_a = if vreset_level_1_1 then 1.0 else 0.0;
  ne0_1_1 = not(ne0_1_1_a = zero_1_1);
  ne1_1_1_a = if delay_sharp_3_1_1 then 1.0 else 0.0;
  ne1_1_1 = not(ne1_1_1_a = zero_1_1);
  zero_1_1 = 0.0;
  f_lpar_x_rpar_g1_1_o = delay_sharp_2_1_1;
tel

node longitudinal_controller_fpacontrol_dynamicsaturation(
  up_1_1, u_1_1, lo_1_1 : real)
returns (y1_1_1 : real) ;
var
  lowerrelop1_1_1 : bool;
  switch_1_1 : real;
  switch2_1_1 : real;
  upperrelop_1_1 : bool;
let 
  lowerrelop1_1_1 = u_1_1 > up_1_1;
  switch_1_1 = if upperrelop_1_1 then lo_1_1 else u_1_1;
  switch2_1_1 = if lowerrelop1_1_1 then up_1_1 else switch_1_1;
  upperrelop_1_1 = u_1_1 < lo_1_1;
  y1_1_1 = switch2_1_1;
tel

node longitudinal_controller_fpacontrol (
  engage_1_1 : bool;
  gamcmd_1_1, gamma_1_1, thetadeg_1_1, vt_1_1 : real)
returns (pitchcmd_1_1 : real) ;
var
  dynamicsaturation_1_1 : real;
  kigamerr_1_1 : real;
  kgamerr_1_1 : real;
  logicaloperator_1_1 : bool;
  mux_1_1 : real; mux_1_2 : real;
  mux1_1_1 : real; mux1_1_2 : real;
  product1_1_1 : real;
  sum_1_1 : real;
  sum1_1_1 : real;
  sum2_1_1 : real;
  integrator_vreset_1_1 : real;
  kt2fps_1_1 : real;
  m1_1_1 : real;
let 
  dynamicsaturation_1_1 =
    longitudinal_controller_fpacontrol_dynamicsaturation(
      product1_1_1, kigamerr_1_1, m1_1_1);
  kigamerr_1_1 = 1.0 * sum2_1_1 ;
  kgamerr_1_1 = 1.4 * gamma_1_1;
  logicaloperator_1_1 = not engage_1_1;
  mux_1_1 = gamcmd_1_1 ;
  mux_1_2 = gamma_1_1 ;
  mux1_1_1 = sum2_1_1 ;
  mux1_1_2 = dynamicsaturation_1_1 ;
  product1_1_1 = (4.83 * 57.2958) * kt2fps_1_1 ;
  sum_1_1 = thetadeg_1_1 + kgamerr_1_1;
  sum1_1_1 = integrator_vreset_1_1 - kgamerr_1_1;
  sum2_1_1 = gamcmd_1_1 - gamma_1_1;
  integrator_vreset_1_1 =
    longitudinal_controller_fpacontrol_integrator_vreset(
      dynamicsaturation_1_1, logicaloperator_1_1, sum_1_1);
  kt2fps_1_1 = 1.6878 * vt_1_1;
  m1_1_1 = -1.0 * product1_1_1;
  pitchcmd_1_1 = sum1_1_1;
tel

node longitudinal_controller_engageorzero (engage_1_1 : bool; in_1_1 : real)
returns (out_1_1 : real) ;
var
  logicaloperator5_1_1 : bool;
  switch1_1_1 : real;
  zero10_1_1 : real;
  zero9_1_1 : real;
  arg1 : bool;
  arg2 : real;
let 
  arg1 = if zero10_1_1 = 0.0 then false else true;
  logicaloperator5_1_1 = engage_1_1 and arg1;
  arg2 = if logicaloperator5_1_1 then 1.0 else 0.0;
  switch1_1_1 = if arg2 >= 0.5 then in_1_1 else zero9_1_1;
  zero10_1_1 = 1.0;
  zero9_1_1 = 0.0;
  out_1_1 = switch1_1_1;
tel

node longitudinal_controller_altitudecontrol_variablelimitsaturation (
  up_lim_1_1, sigin_1_1, lo_lim_1_1 : real)
returns (out1_1_1 : real) ;
var
  enforcelowlim_1_1 : real;
  enforceuplim_1_1 : real;
let 
  enforcelowlim_1_1 =
    if lo_lim_1_1 >= sigin_1_1 then lo_lim_1_1 else sigin_1_1;
  enforceuplim_1_1 =
    if enforcelowlim_1_1 <= up_lim_1_1 then enforcelowlim_1_1 else up_lim_1_1;
  out1_1_1 = enforceuplim_1_1;
tel

node
longitudinal_controller_altitudecontrol_variableratelimit_variablelimitsaturation
  (up_lim_1_1, sigin_1_1, lo_lim_1_1 : real)
returns (out1_1_1 : real) ;
var
  enforcelowlim_1_1 : real;
  enforceuplim_1_1 : real;
let 
  enforcelowlim_1_1 =
    if lo_lim_1_1 >= sigin_1_1 then lo_lim_1_1 else sigin_1_1;
  enforceuplim_1_1 =
    if enforcelowlim_1_1 <= up_lim_1_1 then enforcelowlim_1_1 else up_lim_1_1;
  out1_1_1 = enforceuplim_1_1;
tel

node longitudinal_controller_altitudecontrol_variableratelimit (ratelim_1_1 :
real; input_1_1 : real; ictrig_1_1 : bool; ic_1_1 : real)
returns (output_1_1 : real) ;
var
  vinit : bool;
  gain_1_1 : real;
  gain1_1_1 : real;
  sum2_1_1 : real;
  variablelimitsaturation_1_1 : real;
  integrator_vreset_add_1_1 : real;
  integrator_vreset_constant_1_1 : real;
  integrator_vreset_gain1vreset_1_1 : real;
  integrator_vreset_product_1_1 : real;
  integrator_vreset_product1_1_1 : real;
  integrator_vreset_product2_1_1 : real;
  integrator_vreset_sum1_1_1 : real;
  integrator_vreset_sum2vreset_1_1 : real;
  integrator_vreset_sum3_1_1 : real;
  integrator_vreset_sum4_1_1 : real;
  integrator_vreset_delay_sharp_1_1_1 : real;
  integrator_vreset_delay_sharp_2_1_1 : real;
  integrator_vreset_delay_sharp_3_1_1 : bool;
  integrator_vreset_eq0_1_1 : bool;
  integrator_vreset_ne0_1_1 : bool;
  integrator_vreset_ne1_1_1 : bool;
  integrator_vreset_zero_1_1 : real;
  arg1, arg2, arg3 : real;
let 
  vinit = true fby false;
  gain_1_1 = 20.0 * sum2_1_1;
  gain1_1_1 = -1.0 * ratelim_1_1;
  sum2_1_1 = input_1_1 - integrator_vreset_delay_sharp_2_1_1;
  variablelimitsaturation_1_1 =
    longitudinal_controller_altitudecontrol_variableratelimit_variablelimitsaturation(
      ratelim_1_1, gain_1_1, gain1_1_1);
  integrator_vreset_add_1_1 = integrator_vreset_product1_1_1 + integrator_vreset_product2_1_1;
  integrator_vreset_constant_1_1 = 0.0;
  integrator_vreset_gain1vreset_1_1 = 1.0 * variablelimitsaturation_1_1;
  integrator_vreset_product_1_1 = if vinit then ic_1_1 else 0.0 ;
  integrator_vreset_product1_1_1 =
    if integrator_vreset_ne0_1_1 then integrator_vreset_sum3_1_1 else 0.0 ;
  integrator_vreset_product2_1_1 =
    if integrator_vreset_eq0_1_1 and integrator_vreset_ne1_1_1
    then integrator_vreset_sum3_1_1 else 0.0 ;
  integrator_vreset_sum1_1_1 =
    integrator_vreset_gain1vreset_1_1 + integrator_vreset_sum2vreset_1_1;
  integrator_vreset_sum2vreset_1_1 =
    integrator_vreset_sum4_1_1 + integrator_vreset_product_1_1;
  integrator_vreset_sum3_1_1 = - integrator_vreset_delay_sharp_2_1_1 + ic_1_1;
  integrator_vreset_sum4_1_1 =
    integrator_vreset_delay_sharp_2_1_1 + integrator_vreset_add_1_1;
  integrator_vreset_delay_sharp_1_1_1 = 1.0 fby integrator_vreset_constant_1_1;
  integrator_vreset_delay_sharp_2_1_1 = 0.0 fby integrator_vreset_sum1_1_1;
  integrator_vreset_delay_sharp_3_1_1 = false fby ictrig_1_1;
  arg1 = if ictrig_1_1 then 1.0 else 0.0;
  integrator_vreset_eq0_1_1 = (arg1 = integrator_vreset_zero_1_1);
  arg2 = if ictrig_1_1 then 1.0 else 0.0;
  integrator_vreset_ne0_1_1 = not(arg2 = integrator_vreset_zero_1_1);
  arg3 = if integrator_vreset_delay_sharp_3_1_1 then 1.0 else 0.0;
  integrator_vreset_ne1_1_1 = not(arg3 = integrator_vreset_zero_1_1);
  integrator_vreset_zero_1_1 = 0.0;
  output_1_1 = integrator_vreset_delay_sharp_2_1_1;
tel

node longitudinal_controller_altitudecontrol_saturation1 (sigin_1_1 : real)
returns (out1_1_1 : real) ;
var
  constant1_1_1 : real;
  constant2_1_1 : real;
  enforcelowlim_1_1 : real;
  enforceuplim_1_1 : real;
let 
  constant1_1_1 = 0.0001;
  constant2_1_1 = 1000.0;
  enforcelowlim_1_1 =
    if constant1_1_1 >= sigin_1_1 then constant1_1_1 else sigin_1_1;
  enforceuplim_1_1 =
    if enforcelowlim_1_1 <= constant2_1_1
    then enforcelowlim_1_1 else constant2_1_1;
  out1_1_1 = enforceuplim_1_1;
tel

node longitudinal_controller_altitudecontrol (
  engage_1_1 : bool; altcmd_1_1, altitude_1_1, gskts_1_1, hdot_1_1 : real)
returns (altgamcmd_1_1 : real) ;
var
  abs_1_1 : real;
  constant1_1_1 : real;
  constant3_1_1 : real;
  constant4_1_1 : real;
  divide_1_1 : real;
  kh_1_1 : real;
  logicaloperator_1_1 : bool;
  mux_1_1 : real; mux_1_2 : real;
  mux1_1_1 : real; mux1_1_2 : real;
  saturation1_1_1 : real;
  sum_1_1 : real;
  sum3_1_1 : real;
  switch_1_1 : real;
  variableratelimit_1_1 : real;
  variablelimitsaturation_1_1 : real;
  k_1_1 : real;
  kts2fps_1_1 : real;
  r2d_1_1 : real;
  arg, divide_1_1_a, divide_1_1_b : real;
let 
  abs_1_1 = if hdot_1_1 >= 0.0 then hdot_1_1 else -hdot_1_1;
  constant1_1_1 = 0.0;
  constant3_1_1 = 10.0;
  constant4_1_1 = 3.2;
  arg = if gskts_1_1 < 100.0 then 200.0 else saturation1_1_1;
  divide_1_1_a = divid_bounded_num(variableratelimit_1_1, arg, 168.78, 1000.0);
  divide_1_1_b = divid_bounded_num(variableratelimit_1_1,
                                   saturation1_1_1, 0.0001, 1000.0);
  divide_1_1 = if gskts_1_1 >= 100.0 then divide_1_1_a else divide_1_1_b;
  kh_1_1 = 0.08 * sum_1_1;
  logicaloperator_1_1 = not engage_1_1;
  mux_1_1 = altcmd_1_1 ;
  mux_1_2 = altitude_1_1 ;
  mux1_1_1 = variablelimitsaturation_1_1 ;
  mux1_1_2 = variableratelimit_1_1 ;
  saturation1_1_1 =
    longitudinal_controller_altitudecontrol_saturation1(kts2fps_1_1);
  sum_1_1 = altcmd_1_1 - altitude_1_1;
  sum3_1_1 = abs_1_1 + constant3_1_1;
  switch_1_1 = if engage_1_1 then kh_1_1 else constant1_1_1 ;
  variableratelimit_1_1 =
    longitudinal_controller_altitudecontrol_variableratelimit(
      constant4_1_1, variablelimitsaturation_1_1, logicaloperator_1_1, hdot_1_1);
  variablelimitsaturation_1_1 =
    longitudinal_controller_altitudecontrol_variablelimitsaturation(
      sum3_1_1, switch_1_1, k_1_1);
  k_1_1 = -1.0 * sum3_1_1;
  kts2fps_1_1 = 1.6878 * gskts_1_1;
  r2d_1_1 = 57.2958 * divide_1_1;
  altgamcmd_1_1 = r2d_1_1;
tel

node longitudinal_controller (fpacmd_1_1 : real; alteng_1_1 : bool; fpaeng_1_1 :
bool; altcmd_1_1 : real; alt_1_1 : real; thetadeg_1_1 : real; qdeg_1_1 : real;
gskts_1_1 : real; hdot_1_1 : real; vt_1_1 : real; gamma_1_1 : real; cas_1_1 :
real; elevstick_1_1 : real)
returns (alt_cmd_out, pitch_cmd_out, elevcmd_1_1 : real) ;

var
  altitudecontrol_1_1 : real;
  engageorzero_1_1 : real;
  fpacontrol_1_1 : real;
  logicaloperator_1_1 : bool;
  manualoverride_1_1 : real;
  pitchinnerloop_1_1 : real;
  sum7_1_1 : real;
  act_cmd_ge_cmd, alt_out_loc_pos : bool ;
  k2_1_1 : real;
  k5_1_1 : real;
let 
  altitudecontrol_1_1 = longitudinal_controller_altitudecontrol(
    alteng_1_1, altcmd_1_1, alt_1_1, gskts_1_1, hdot_1_1);
  engageorzero_1_1 = longitudinal_controller_engageorzero(
    logicaloperator_1_1, pitchinnerloop_1_1);
  fpacontrol_1_1 = longitudinal_controller_fpacontrol(
    fpaeng_1_1, sum7_1_1, gamma_1_1, thetadeg_1_1, vt_1_1);
  logicaloperator_1_1 = alteng_1_1 or fpaeng_1_1;
  manualoverride_1_1 =
    longitudinal_controller_manualoverride(elevstick_1_1, engageorzero_1_1);
  pitchinnerloop_1_1 =
    longitudinal_controller_pitchinnerloop(k5_1_1, thetadeg_1_1,
                                           qdeg_1_1, cas_1_1);
  sum7_1_1 = fpacmd_1_1 + k2_1_1;
  act_cmd_ge_cmd = sum7_1_1 >= fpacmd_1_1 ;
  alt_out_loc_pos = k2_1_1 >= 0.0 ;
  k2_1_1 = 1.0 * altitudecontrol_1_1;
  k5_1_1 = 1.0 * fpacontrol_1_1;
  elevcmd_1_1 = manualoverride_1_1;
  pitch_cmd_out =
    if act_cmd_ge_cmd or not act_cmd_ge_cmd
    then if alt_out_loc_pos or not alt_out_loc_pos
         then fpacontrol_1_1
         else 0.0
    else 0.0 ;
  alt_cmd_out = altitudecontrol_1_1 ;
tel

node mode_plus_longitudinal (
  head_mode : real ;
  ail_stick_in : real ;
  elev_stick_in : real ;
  -- altitude mode.
  alt_mode : real ;
  -- flight path angle mode.
  fpa_mode : real ;
  -- auto throttle mode.
  at_mode : real ;
  alt_cmd_in : real ;
  alt_in : real ;
  cas_in : real ;
  cas_cmd : real ;
  pitch_in : real ;
  qbdegf_1_1 : real ;
  gskts_in : real ;
  hdot_in : real ;
  speed_in : real ;
  fpa_in : real ;
  fpa_cmd_in : real
) returns (
  head_eng_out, alt_eng_out, at_eng_out, fpa_eng_out : bool ;
  cas_cmd_out, alt_cmd_out, pitch_cmd_out, elev_cmd_out : real
) ;

let 
  (head_eng_out, alt_eng_out, fpa_eng_out, at_eng_out, cas_cmd_out) =
    mode_logic(head_mode, ail_stick_in, elev_stick_in, alt_mode, fpa_mode,
               at_mode, alt_cmd_in, alt_in, cas_in, cas_cmd);

  assert (if fall(alt_eng_out) then not fpa_eng_out else true) ;

  (alt_cmd_out, pitch_cmd_out, elev_cmd_out) =
    longitudinal_controller(fpa_cmd_in, alt_eng_out, fpa_eng_out, alt_cmd_in,
                            alt_in, pitch_in, qbdegf_1_1, gskts_in, hdot_in,
                            speed_in, fpa_in, cas_in, elev_stick_in);
tel

