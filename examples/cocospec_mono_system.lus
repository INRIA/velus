(* kind2-mc/cocospec_tcm_experiments/systems/cocospec_mono_system.lus
   2015 Adrien Champion *)

node max(fst, snd: real) returns (vout: real) ;
let
  vout = if fst >= snd then fst else snd ;
tel

node min(fst, snd: real) returns (vout: real) ;
let
  vout = if fst <= snd then fst else snd ;
tel

node duration(in: bool) returns (vout: int) ;
var always_true, pre_always_true: bool; pout: int ;
let
  pre_always_true = true fby always_true ;
  always_true = in and pre_always_true ;
  pout = 1 fby (vout + 1) ;
  vout = if always_true then pout else 0 ;
tel

node fall(in: bool) returns (vout: bool) ;
var pre_in: bool;
let
  pre_in = false fby in ;
  vout = (not in) and pre_in ;
tel

node rise(in: bool) returns (vout: bool) ;
var pre_not_in : bool;
let
  pre_not_in = false fby (not in) ;
  vout = in and pre_not_in ;
tel

node count(in: bool) returns (vout: int) ;
var pout: int ;
let
  pout = 1 fby (vout + 1);
  vout = if in then pout else 0 ;
tel

node count_succ_true(in: bool) returns (vout: int) ;
var pout: int ;
let
  pout = 1 fby (vout + 1);
  vout = if in then pout else 0 ;
tel

node count_true_since(in, reset: bool) returns (vout: int) ;
var pout: int ;
let
  pout = 0 fby vout;
  vout = if reset then 0 else if in then pout + 1 else pout ;
tel

node has_been_true(in: bool) returns (vout: bool) ;
var pout: bool;
let
  pout = false fby vout ;
  vout = in or pout ;
tel

node has_been_true_reset(in, reset: bool) returns (vout: bool) ;
var pout: bool;
let
  pout = false fby vout ;
  vout = (in or pout) and not reset ;
tel

node since(in: bool) returns (vout: int) ;
var pout: int;
let
  pout = 0 fby vout ;
  vout = if in then (pout + 1) else 0 ;
tel

node spike_or_confirmed(in: bool ; count: int ; reset: bool)
returns (vout: bool) ;
var has_been_true: bool; since_in: int ;
let
  has_been_true = has_been_true_reset(since_in = count, reset) ;
  since_in = since(in) ;
  vout = (in and not reset) or has_been_true ;
tel

node before_lt(max: int) returns (vout: bool) ;
var d: int ;
let
  d = duration(true) ;
  vout = d < max ;
tel

node after_ge(min: int) returns (vout: bool) ;
var d: int;
let
  d = duration(true) ;
  vout = d >= min ;
tel

node since_le_not_0(in: bool; max: int) returns (vout: bool) ;
var sinc3: int ;
let
  sinc3 = since(in) ;
  vout = (0 < sinc3) and (sinc3 <= max) ;
tel

node since_gt_or_0(in: bool; min: int) returns (vout: bool) ;
var sinc3: int ;
let
  sinc3 = since(in) ;
  vout = (0 = sinc3) or (sinc3 > min) ;
tel

node lasted(in: bool) returns (vout: int) ;
var pout: int;
let
  pout = 0 fby vout ;
  vout = if in then pout + 1 else 0 ;
tel

node f_t_t_t(i1, i2, i3, i4: bool) returns (vout: bool) ;
let
  vout = (not i1) and i2 and i3 and i4 ;
tel

node t_f_t_t(i1, i2, i3, i4: bool) returns (vout: bool) ;
let
  vout = i1 and (not i2) and i3 and i4 ;
tel

node abs(in: real) returns (vout: real) ;
let
  vout = if in < 0.0 then -in else in ;
tel

node clamp(l_bound, in, u_bound: real) returns (vout: real) ;
let
  vout =
    if in < l_bound then l_bound else if in > u_bound then u_bound else in ;
tel

node Right (heading, cmd: real) returns (vout: bool) ;
let
  vout = (
    ((cmd - heading) > 0.0) and
    ((cmd - heading) < 180.0)
  ) ;
tel

node Left (heading, cmd: real) returns (vout: bool) ;
let
  vout = (
    ((cmd - heading) < 0.0) and
    ((cmd - heading) > - 180.0)
  ) ;
tel

node sign(in: real) returns (vout: bool) ;
let
  vout = in >= 0.0 ;
tel

node PseudoContinuous (in, inc: real) returns (vout: bool) ;
var pre_in, absv: real; init: bool;
let
  pre_in = 0.0 fby in;
  init = true fby false;
  absv = abs(in - pre_in);
  vout = if init then 0 <= inc else absv <= inc ;
tel

-- |===| Abstractions of non-linear streams.

node times(x, y: real) returns (z: real) ;
let
  z = x * y ;
tel

node divid(num, den: real) returns (res: real) ;
let
  res = num / den ;
tel

(* Division with some bounds on the denominator.
  Bounds MUST BE NUMBERS, otherwise the contract is non-linear. *)
node divid_bounded_num(num, den: real ; l_bound, u_bound: real)
returns (res: real) ;
let
  res = num / den ;
tel

node temporal_divid(num, den: real) returns (res: real) ;
let
  res = num / den ;
tel

-- |===| latitudinal_control.lus

node nl_latitudinal_1(in1, in2, in3: real) returns (vout: real) ;
var arg : real;
let
  arg = divid(in1, in2);
  vout = times(in3, arg) ;
tel

node nl_latitudinal_2(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = divid(in1, in2) ;
  vout = times(in3, arg) ;
tel

node nl_latitudinal_3(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = divid(in1, in2) ;
  vout = times(in3, arg) ;
tel

node nl_latitudinal_4(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_5(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_6(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_7(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_8(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_latitudinal_9(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = times(in1, arg) ;
tel

node nl_latitudinal_10(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = times(in1, arg) ;
tel

node nl_latitudinal_11(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = times(in1, arg) ;
tel

node nl_latitudinal_12(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

-- |===| longitudinal_control.lus

node nl_longitudinal_1(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_longitudinal_2(in1, in2: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_longitudinal_3(in1, in2, in3: real) returns (vout: real) ;
let
  vout = times(in1, in2) ;
tel

node nl_longitudinal_4(in1, in2: real) returns (vout: real) ;
let
  vout = divid(in1, in2) ;
tel

node nl_longitudinal_5(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_6(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_7(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_8(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3) ;
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_9(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3);
  vout = divid(in1, arg) ;
tel

node nl_longitudinal_10(in1, in2, in3: real) returns (vout: real) ;
var arg: real;
let
  arg = times(in2, in3);
  vout = divid(in1, arg) ;
tel

-- System nodes
node MODE_LOGIC_SpeedMode (
  Activate_1_1, Deactivate_1_1 : real;
  AltEng_1_1 : bool;
  CAS_1_1, CASCmdMCP_1_1 : real)
returns (
  ATEng_1_1 : bool;
  CASCmd_2_1 : real);
var
  Add_1_1, Add_1_1_a, Add_1_1_b : int;
  CompareToConstant_1_1 : bool;
  CompareToConstant1_1_1 : bool;
  LogicalOperator_1_1 : bool;
  LogicalOperator2_1_1 : bool;
  Switch_1_1 : real;
  Switch1_1_1 : real;
  SRFlipFlopRepl_dot__LogicalOperator_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator1_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator2_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator3_1_1 : bool;
  SRFlipFlopRepl_dot__UnitDelay_1_1 : bool;
  SRFlipFlopRepl_dot__UnitDelay1_1_1 : bool;
  UnitDelay2_1_1 : real;
let 
  Add_1_1_a = if CompareToConstant1_1_1 then 1 else 0;
  Add_1_1_b = if LogicalOperator_1_1 then 1 else 0;
  Add_1_1 = Add_1_1_a + Add_1_1_b;
  CompareToConstant_1_1 = not(Deactivate_1_1 = 0.0);
  CompareToConstant1_1_1 = not(Activate_1_1 = 0.0);
  LogicalOperator_1_1 = AltEng_1_1 and SRFlipFlopRepl_dot__LogicalOperator_1_1;
  LogicalOperator2_1_1 = CompareToConstant1_1_1 or LogicalOperator_1_1;
  Switch_1_1 = if Add_1_1 >= 0 then UnitDelay2_1_1 else Switch1_1_1;
  Switch1_1_1 = if Add_1_1 > 1 then CASCmdMCP_1_1 else CAS_1_1;
  SRFlipFlopRepl_dot__LogicalOperator_1_1 =
    not(SRFlipFlopRepl_dot__UnitDelay_1_1
        and SRFlipFlopRepl_dot__LogicalOperator3_1_1);
  SRFlipFlopRepl_dot__LogicalOperator1_1_1 =
    not(SRFlipFlopRepl_dot__LogicalOperator2_1_1
        and SRFlipFlopRepl_dot__UnitDelay1_1_1);
  SRFlipFlopRepl_dot__LogicalOperator2_1_1 = not LogicalOperator2_1_1;
  SRFlipFlopRepl_dot__LogicalOperator3_1_1 = not CompareToConstant_1_1;
  SRFlipFlopRepl_dot__UnitDelay_1_1 =
    false fby SRFlipFlopRepl_dot__LogicalOperator1_1_1;
  SRFlipFlopRepl_dot__UnitDelay1_1_1 =
    true fby SRFlipFlopRepl_dot__LogicalOperator_1_1;
  UnitDelay2_1_1 = 0.0 fby Switch_1_1;
  ATEng_1_1 = SRFlipFlopRepl_dot__LogicalOperator1_1_1;
  CASCmd_2_1 = UnitDelay2_1_1;
tel

node MODE_LOGIC_HeadingMode (
  Activate_1_1 : real; Deactivate_1_1 : bool
) returns (HeadEng_1_1 : bool) ;
var
  arg : real;
  CompareToConstant_1_1 : bool;
  CompareToConstant1_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator1_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator2_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator3_1_1 : bool;
  SRFlipFlopRepl_dot__UnitDelay_1_1 : bool;
  SRFlipFlopRepl_dot__UnitDelay1_1_1 : bool;
let 
  arg = if Deactivate_1_1 then 1.0 else 0.0;
  CompareToConstant_1_1 = not(arg = 0.0);
  CompareToConstant1_1_1 = not(Activate_1_1 = 0.0);
  SRFlipFlopRepl_dot__LogicalOperator_1_1 =
    not(SRFlipFlopRepl_dot__UnitDelay_1_1
        and SRFlipFlopRepl_dot__LogicalOperator3_1_1);
  SRFlipFlopRepl_dot__LogicalOperator1_1_1 =
    not(SRFlipFlopRepl_dot__LogicalOperator2_1_1
        and SRFlipFlopRepl_dot__UnitDelay1_1_1);
  SRFlipFlopRepl_dot__LogicalOperator2_1_1 = not CompareToConstant1_1_1;
  SRFlipFlopRepl_dot__LogicalOperator3_1_1 = not CompareToConstant_1_1;
  SRFlipFlopRepl_dot__UnitDelay_1_1 =
    false fby SRFlipFlopRepl_dot__LogicalOperator1_1_1;
  SRFlipFlopRepl_dot__UnitDelay1_1_1 =
    true fby SRFlipFlopRepl_dot__LogicalOperator_1_1;
  HeadEng_1_1 = SRFlipFlopRepl_dot__LogicalOperator1_1_1;
tel

node MODE_LOGIC_AltAndFPAMode (
  ActivateFPA_1_1 : real;
  Deactivate_1_1 : bool;
  Altitude_1_1, AltCmd_1_1, ActivateAlt_1_1 : real
) returns (AltEng_1_1, FPAEng_2_1 : bool);
var
  arg : real;
  Abs_1_1 : real;
  Add_1_1 : real;
  CompareToConstant_1_1 : bool;
  CompareToConstant1_1_1 : bool;
  CompareToConstant2_1_1 : bool;
  CompareToConstant3_1_1 : bool;
  LogicalOperator1_1_1 : bool;
  LogicalOperator2_1_1 : bool;
  LogicalOperator3_1_1 : bool;
  LogicalOperator4_1_1 : bool;
  LogicalOperator6_1_1 : bool;
  SRFlipFlopRepl_dot_1_LogicalOperator_1_1 : bool;
  SRFlipFlopRepl_dot_1_LogicalOperator1_1_1 : bool;
  SRFlipFlopRepl_dot_1_LogicalOperator2_1_1 : bool;
  SRFlipFlopRepl_dot_1_LogicalOperator3_1_1 : bool;
  SRFlipFlopRepl_dot_1_UnitDelay_1_1 : bool;
  SRFlipFlopRepl_dot_1_UnitDelay1_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator1_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator2_1_1 : bool;
  SRFlipFlopRepl_dot__LogicalOperator3_1_1 : bool;
  SRFlipFlopRepl_dot__UnitDelay_1_1 : bool;
  SRFlipFlopRepl_dot__UnitDelay1_1_1 : bool;
let 
  Abs_1_1 = if Add_1_1 >= 0.0 then Add_1_1 else -Add_1_1;
  Add_1_1 = Altitude_1_1 - AltCmd_1_1;
  arg = if Deactivate_1_1 then 1.0 else 0.0;
  CompareToConstant_1_1 = not(arg = 0.0);
  CompareToConstant1_1_1 = not(ActivateFPA_1_1 = 0.0);
  CompareToConstant2_1_1 = Abs_1_1 <= 200.0;
  CompareToConstant3_1_1 = not(ActivateAlt_1_1 = 0.0);
  LogicalOperator1_1_1 = LogicalOperator2_1_1 or CompareToConstant2_1_1;
  LogicalOperator2_1_1 = not SRFlipFlopRepl_dot__LogicalOperator1_1_1;
  LogicalOperator3_1_1 =
    SRFlipFlopRepl_dot__LogicalOperator1_1_1 and LogicalOperator6_1_1;
  LogicalOperator4_1_1 =
    SRFlipFlopRepl_dot_1_LogicalOperator1_1_1 and LogicalOperator1_1_1;
  LogicalOperator6_1_1 =
    not(SRFlipFlopRepl_dot_1_LogicalOperator1_1_1 and CompareToConstant2_1_1);
  SRFlipFlopRepl_dot_1_LogicalOperator_1_1 =
    not(SRFlipFlopRepl_dot_1_UnitDelay_1_1
        and SRFlipFlopRepl_dot_1_LogicalOperator3_1_1);
  SRFlipFlopRepl_dot_1_LogicalOperator1_1_1 =
    not(SRFlipFlopRepl_dot_1_LogicalOperator2_1_1
        and SRFlipFlopRepl_dot_1_UnitDelay1_1_1);
  SRFlipFlopRepl_dot_1_LogicalOperator2_1_1 = not CompareToConstant3_1_1;
  SRFlipFlopRepl_dot_1_LogicalOperator3_1_1 = not CompareToConstant_1_1;
  SRFlipFlopRepl_dot_1_UnitDelay_1_1 =
    false fby SRFlipFlopRepl_dot_1_LogicalOperator1_1_1;
  SRFlipFlopRepl_dot_1_UnitDelay1_1_1 =
    true fby SRFlipFlopRepl_dot_1_LogicalOperator_1_1;
  SRFlipFlopRepl_dot__LogicalOperator_1_1 =
    not(SRFlipFlopRepl_dot__UnitDelay_1_1
        and SRFlipFlopRepl_dot__LogicalOperator3_1_1);
  SRFlipFlopRepl_dot__LogicalOperator1_1_1 =
    not(SRFlipFlopRepl_dot__LogicalOperator2_1_1
      and SRFlipFlopRepl_dot__UnitDelay1_1_1);
  SRFlipFlopRepl_dot__LogicalOperator2_1_1 = not CompareToConstant1_1_1;
  SRFlipFlopRepl_dot__LogicalOperator3_1_1 = not CompareToConstant_1_1;
  SRFlipFlopRepl_dot__UnitDelay_1_1 =
    false fby SRFlipFlopRepl_dot__LogicalOperator1_1_1;
  SRFlipFlopRepl_dot__UnitDelay1_1_1 =
    true fby SRFlipFlopRepl_dot__LogicalOperator_1_1;
  AltEng_1_1 = LogicalOperator4_1_1;
  FPAEng_2_1 = LogicalOperator3_1_1;
tel

node MODE_LOGIC (
  HeadMode_1_1, ailStick_1_1, elevStick_1_1, AltMode_1_1,
  FPAMode_1_1, ATMode_1_1, AltCmd_1_1, Altitude_1_1,
  CAS_1_1, CASCmdMCP_1_1 : real)
returns (HeadEng_1_1, AltEng_2_1, FPAEng_3_1, ATEng_4_1 : bool;
         CASCmd_5_1 : real) ;
var
  AltAndFPAMode_1_1 : bool;
  AltAndFPAMode_2_1 : bool;
  CompareToZero_1_1 : bool;
  CompareToZero1_1_1 : bool;
  Constant_1_1 : real;
  HeadingMode_1_1 : bool;
  LogicalOperator_1_1 : bool;
  SpeedMode_1_1 : bool;
  SpeedMode_2_1 : real;
let 
  (AltAndFPAMode_1_1, AltAndFPAMode_2_1) =
    MODE_LOGIC_AltAndFPAMode(FPAMode_1_1, LogicalOperator_1_1, Altitude_1_1,
                             AltCmd_1_1, AltMode_1_1);
  CompareToZero_1_1 = not(ailStick_1_1 = 0.0);
  CompareToZero1_1_1 = not(elevStick_1_1 = 0.0);
  Constant_1_1 = 0.0;
  HeadingMode_1_1 = MODE_LOGIC_HeadingMode(HeadMode_1_1, LogicalOperator_1_1);
  LogicalOperator_1_1 = CompareToZero_1_1 or CompareToZero1_1_1;
  (SpeedMode_1_1, SpeedMode_2_1) =
    MODE_LOGIC_SpeedMode(ATMode_1_1, Constant_1_1, AltAndFPAMode_2_1,
                         CAS_1_1, CASCmdMCP_1_1);
  HeadEng_1_1 = HeadingMode_1_1;
  AltEng_2_1 = AltAndFPAMode_1_1;
  FPAEng_3_1 = AltAndFPAMode_2_1;
  ATEng_4_1 = SpeedMode_1_1;
  CASCmd_5_1 = SpeedMode_2_1;
tel

node LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d_interpolate1d_sharp_2 (
  In1_1_1, x1_1_1, x2_1_1, y1_1_1, y2_1_1 : real )
returns (Out1_1_1 : real) ;
var
  arg : real;
  Add1_1_1 : real;
  Add2_1_1 : real;
  Add3_1_1 : real;
  Add4_1_1 : real;
  Divide_1_1 : real;
let 
  Add1_1_1 =  - x1_1_1 + x2_1_1;
  Add2_1_1 = Divide_1_1 + y1_1_1;
  Add3_1_1 =  - y1_1_1 + y2_1_1;
  Add4_1_1 = In1_1_1 - x1_1_1;
  arg = divid(Add4_1_1, Add1_1_1) ;
  Divide_1_1 = times(arg, Add3_1_1 ) ;
  Out1_1_1 = Add2_1_1;
tel

node LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d_interpolate1d_sharp_1(
  In1_1_1, x1_1_1, x2_1_1, y1_1_1, y2_1_1 : real)
returns (Out1_1_1 : real) ;
var
  arg : real;
  Add1_1_1 : real;
  Add2_1_1 : real;
  Add3_1_1 : real;
  Add4_1_1 : real;
  Divide_1_1 : real;
let 
  Add1_1_1 =  - x1_1_1 + x2_1_1;
  Add2_1_1 = Divide_1_1 + y1_1_1;
  Add3_1_1 =  - y1_1_1 + y2_1_1;
  Add4_1_1 = In1_1_1 - x1_1_1;
  arg = divid(Add4_1_1, Add1_1_1);
  Divide_1_1 = times(arg, Add3_1_1 ) ;
  Out1_1_1 = Add2_1_1;
tel

node LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d_interpolate1d_sharp_0 (
  In1_1_1, x1_1_1, x2_1_1, y1_1_1, y2_1_1 : real)
returns (Out1_1_1 : real) ;
var
  arg : real;
  Add1_1_1 : real;
  Add2_1_1 : real;
  Add3_1_1 : real;
  Add4_1_1 : real;
  Divide_1_1 : real;
let 
  Add1_1_1 =  - x1_1_1 + x2_1_1;
  Add2_1_1 = Divide_1_1 + y1_1_1;
  Add3_1_1 =  - y1_1_1 + y2_1_1;
  Add4_1_1 = In1_1_1 - x1_1_1;
  arg = divid(Add4_1_1, Add1_1_1);
  Divide_1_1 = times(arg, Add3_1_1 ) ;
  Out1_1_1 = Add2_1_1;
tel

node LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d (In1_1_1 : real)
returns (Out1_1_1 : real) ;
var
  Add_1_1 : real;
  branch_sharp_1_1_1 : real;
  branch_sharp_2_1_1 : real;
  branch_sharp_3_1_1 : real;
  gte1_1_1 : bool;
  gte2_1_1 : bool;
  gte3_1_1 : bool;
  interpolate1d_sharp_0_1_1 : real;
  interpolate1d_sharp_1_1_1 : real;
  interpolate1d_sharp_2_1_1 : real;
  lte1_1_1 : bool;
  lte2_1_1 : bool;
  lte3_1_1 : bool;
  r1_1_1 : real;
  r2_1_1 : real;
  r3_1_1 : real;
  r4_1_1 : real;
  r5_1_1 : real;
  r6_1_1 : real;
  r7_1_1 : real;
  r8_1_1 : real;
let 
  Add_1_1 = branch_sharp_1_1_1 + branch_sharp_2_1_1 + branch_sharp_3_1_1;
  branch_sharp_1_1_1 =
    if lte1_1_1 and gte1_1_1 then interpolate1d_sharp_0_1_1 else 0.0 ;
  branch_sharp_2_1_1 =
    if lte2_1_1 and gte2_1_1 then interpolate1d_sharp_1_1_1 else 0.0 ;
  branch_sharp_3_1_1 =
    if lte3_1_1 and gte3_1_1 then interpolate1d_sharp_2_1_1 else 0.0 ;
  gte1_1_1 = In1_1_1 <= r2_1_1;
  gte2_1_1 = In1_1_1 <= r3_1_1;
  gte3_1_1 = In1_1_1 <= r4_1_1;
  interpolate1d_sharp_0_1_1 =
    LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d_interpolate1d_sharp_0(
      In1_1_1, r1_1_1, r2_1_1, r5_1_1, r6_1_1);
  interpolate1d_sharp_1_1_1 =
    LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d_interpolate1d_sharp_1(
      In1_1_1, r2_1_1, r3_1_1, r6_1_1, r7_1_1);
  interpolate1d_sharp_2_1_1 =
    LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d_interpolate1d_sharp_2(
      In1_1_1, r3_1_1, r4_1_1, r7_1_1, r8_1_1);
  lte1_1_1 = In1_1_1 >= r1_1_1;
  lte2_1_1 = In1_1_1 > r2_1_1;
  lte3_1_1 = In1_1_1 > r3_1_1;
  r1_1_1 = 0.0;
  r2_1_1 = 120.0;
  r3_1_1 = 350.0;
  r4_1_1 = 500.0;
  r5_1_1 = 1.0;
  r6_1_1 = 1.0;
  r7_1_1 = 0.3;
  r8_1_1 = 0.3;
  Out1_1_1 = Add_1_1;
tel

node LONGITUDINAL_CONTROLLER_PitchInnerLoop_TransferFunc (u_1_1 : real)
returns (y_1_1 : real) ;
var
  a_sharp_1_1_1 : real;
  b0_sharp_0_1_1 : real;
  b0_sharp_1_1_1 : real;
  delay_sharp_1_1_1 : real;
  output_sum_1_1 : real;
  sample_sharp_1_1_1 : real;
  sum11_1_1 : real;
  sum21_1_1 : real;
let 
  a_sharp_1_1_1 = 0.0625 * delay_sharp_1_1_1;
  b0_sharp_0_1_1 = 1.0 * u_1_1;
  b0_sharp_1_1_1 = -1.0 * a_sharp_1_1_1;
  delay_sharp_1_1_1 = 0.0 fby sum21_1_1;
  output_sum_1_1 = b0_sharp_0_1_1 + b0_sharp_1_1_1;
  sample_sharp_1_1_1 = 0.02 * sum11_1_1;
  sum11_1_1 = u_1_1 - a_sharp_1_1_1;
  sum21_1_1 = sample_sharp_1_1_1 + delay_sharp_1_1_1;
  y_1_1 = output_sum_1_1;
tel

node LONGITUDINAL_CONTROLLER_PitchInnerLoop (
  PitchCmd_1_1, Pitch_1_1, qdeg_1_1, CAS_1_1 : real)
returns (ElevCmd_1_1 : real) ;
var
  Kpitch_1_1 : real;
  Kwo_1_1 : real;
  Mux_1_1 : real; Mux_1_2 : real;
  Product_1_1 : real;
  Sum_1_1 : real;
  Sum1_1_1 : real;
  TransferFunc_1_1 : real;
  lookup1d_1_1 : real;
let 
  Kpitch_1_1 = 2.0 * Sum_1_1;
  Kwo_1_1 = 0.5 * TransferFunc_1_1;
  Mux_1_1 = PitchCmd_1_1 ;
  Mux_1_2 = Pitch_1_1 ;
  Product_1_1 = times(Sum1_1_1, lookup1d_1_1);
  Sum_1_1 = PitchCmd_1_1 - Pitch_1_1;
  Sum1_1_1 =  - Kpitch_1_1 + Kwo_1_1;
  TransferFunc_1_1 =
    LONGITUDINAL_CONTROLLER_PitchInnerLoop_TransferFunc(qdeg_1_1);
  lookup1d_1_1 = LONGITUDINAL_CONTROLLER_PitchInnerLoop_lookup1d(CAS_1_1);
  ElevCmd_1_1 = Product_1_1;
tel

node LONGITUDINAL_CONTROLLER_ManualOverride (Man_1_1 : real; Auto_1_1 : real)
returns (Out_1_1 : real) ;
var
  Switch1_1_1 : real;
let 
  Switch1_1_1 = if Man_1_1 <> 0.0 then Man_1_1 else Auto_1_1 ;
  Out_1_1 = Switch1_1_1;
tel

node LONGITUDINAL_CONTROLLER_FPAControl_integrator_reset (
  f_lpar_x_rpar__1_1 : real; reset_level_1_1 : bool; x0_1_1 : real)
returns (F_lpar_x_rpar__1_1 : real) ;
var
  init : bool;
  Add_1_1 : real;
  Constant_1_1 : real;
  Gain1_1_1 : real;
  Product_1_1 : real;
  Product1_1_1 : real;
  Product2_1_1 : real;
  Sum1_1_1 : real;
  Sum2_1_1 : real;
  Sum3_1_1 : real;
  Sum4_1_1 : real;
  delay_sharp_1_1_1 : real;
  delay_sharp_2_1_1 : real;
  delay_sharp_3_1_1 : bool;
  eq0_1_1 : bool;
  ne0_1_1 : bool;
  ne1_1_1 : bool;
  zero_1_1 : real;
  eq0_1_1_a, ne0_1_1_a, ne1_1_1_a : real;
let 
  init = true fby false;
  Add_1_1 = Product1_1_1 + Product2_1_1;
  Constant_1_1 = 0.0;
  Gain1_1_1 = 1.0 * f_lpar_x_rpar__1_1;
  Product_1_1 = if init then x0_1_1 else 0.0 ;
  Product1_1_1 = if ne0_1_1 then Sum3_1_1 else 0.0 ;
  Product2_1_1 = if eq0_1_1 and ne1_1_1 then Sum3_1_1 else 0.0 ;
  Sum1_1_1 = Gain1_1_1 + Sum2_1_1;
  Sum2_1_1 = Sum4_1_1 + Product_1_1;
  Sum3_1_1 =  - delay_sharp_2_1_1 + x0_1_1;
  Sum4_1_1 = delay_sharp_2_1_1 + Add_1_1;
  delay_sharp_1_1_1 = 1.0;
  delay_sharp_2_1_1 = 0.0 fby Sum1_1_1;
  delay_sharp_3_1_1 = false fby reset_level_1_1;
  eq0_1_1_a =if reset_level_1_1 then 1.0 else 0.0;
  eq0_1_1 = (eq0_1_1_a = zero_1_1);
  ne0_1_1_a = if reset_level_1_1 then 1.0 else 0.0;
  ne0_1_1 = not(ne0_1_1_a = zero_1_1);
  ne1_1_1_a = if delay_sharp_3_1_1 then 1.0 else 0.0;
  ne1_1_1 = not(ne1_1_1_a = zero_1_1);
  zero_1_1 = 0.0;
  F_lpar_x_rpar__1_1 = delay_sharp_2_1_1;
tel

node LONGITUDINAL_CONTROLLER_FPAControl_DynamicSaturation(
  up_1_1, u_1_1, lo_1_1 : real)
returns (y1_1_1 : real) ;
var
  LowerRelop1_1_1 : bool;
  Switch_1_1 : real;
  Switch2_1_1 : real;
  UpperRelop_1_1 : bool;
let 
  LowerRelop1_1_1 = u_1_1 > up_1_1;
  Switch_1_1 = if UpperRelop_1_1 then lo_1_1 else u_1_1;
  Switch2_1_1 = if LowerRelop1_1_1 then up_1_1 else Switch_1_1;
  UpperRelop_1_1 = u_1_1 < lo_1_1;
  y1_1_1 = Switch2_1_1;
tel

node LONGITUDINAL_CONTROLLER_FPAControl (
  engage_1_1 : bool;
  gamcmd_1_1, gamma_1_1, thetadeg_1_1, VT_1_1 : real)
returns (PitchCmd_1_1 : real) ;
var
  DynamicSaturation_1_1 : real;
  KIgamerr_1_1 : real;
  Kgamerr_1_1 : real;
  LogicalOperator_1_1 : bool;
  Mux_1_1 : real; Mux_1_2 : real;
  Mux1_1_1 : real; Mux1_1_2 : real;
  Product1_1_1 : real;
  Sum_1_1 : real;
  Sum1_1_1 : real;
  Sum2_1_1 : real;
  integrator_reset_1_1 : real;
  kt2fps_1_1 : real;
  m1_1_1 : real;
let 
  DynamicSaturation_1_1 =
    LONGITUDINAL_CONTROLLER_FPAControl_DynamicSaturation(
      Product1_1_1, KIgamerr_1_1, m1_1_1);
  KIgamerr_1_1 = 1.0 * Sum2_1_1 ;
  Kgamerr_1_1 = 1.4 * gamma_1_1;
  LogicalOperator_1_1 = not engage_1_1;
  Mux_1_1 = gamcmd_1_1 ;
  Mux_1_2 = gamma_1_1 ;
  Mux1_1_1 = Sum2_1_1 ;
  Mux1_1_2 = DynamicSaturation_1_1 ;
  Product1_1_1 = (4.83 * 57.2958) * kt2fps_1_1 ;
  Sum_1_1 = thetadeg_1_1 + Kgamerr_1_1;
  Sum1_1_1 = integrator_reset_1_1 - Kgamerr_1_1;
  Sum2_1_1 = gamcmd_1_1 - gamma_1_1;
  integrator_reset_1_1 =
    LONGITUDINAL_CONTROLLER_FPAControl_integrator_reset(
      DynamicSaturation_1_1, LogicalOperator_1_1, Sum_1_1);
  kt2fps_1_1 = 1.6878 * VT_1_1;
  m1_1_1 = -1.0 * Product1_1_1;
  PitchCmd_1_1 = Sum1_1_1;
tel

node LONGITUDINAL_CONTROLLER_EngageORzero (Engage_1_1 : bool; In_1_1 : real)
returns (Out_1_1 : real) ;
var
  LogicalOperator5_1_1 : bool;
  Switch1_1_1 : real;
  zero10_1_1 : real;
  zero9_1_1 : real;
  arg1 : bool;
  arg2 : real;
let 
  arg1 = if zero10_1_1 = 0.0 then false else true;
  LogicalOperator5_1_1 = Engage_1_1 and arg1;
  arg2 = if LogicalOperator5_1_1 then 1.0 else 0.0;
  Switch1_1_1 = if arg2 >= 0.5 then In_1_1 else zero9_1_1;
  zero10_1_1 = 1.0;
  zero9_1_1 = 0.0;
  Out_1_1 = Switch1_1_1;
tel

node LONGITUDINAL_CONTROLLER_AltitudeControl_VariableLimitSaturation (
  up_lim_1_1, SigIn_1_1, Lo_lim_1_1 : real)
returns (Out1_1_1 : real) ;
var
  Enforcelowlim_1_1 : real;
  Enforceuplim_1_1 : real;
let 
  Enforcelowlim_1_1 =
    if Lo_lim_1_1 >= SigIn_1_1 then Lo_lim_1_1 else SigIn_1_1;
  Enforceuplim_1_1 =
    if Enforcelowlim_1_1 <= up_lim_1_1 then Enforcelowlim_1_1 else up_lim_1_1;
  Out1_1_1 = Enforceuplim_1_1;
tel

node
LONGITUDINAL_CONTROLLER_AltitudeControl_VariableRateLimit_VariableLimitSaturation
  (up_lim_1_1, SigIn_1_1, Lo_lim_1_1 : real)
returns (Out1_1_1 : real) ;
var
  Enforcelowlim_1_1 : real;
  Enforceuplim_1_1 : real;
let 
  Enforcelowlim_1_1 =
    if Lo_lim_1_1 >= SigIn_1_1 then Lo_lim_1_1 else SigIn_1_1;
  Enforceuplim_1_1 =
    if Enforcelowlim_1_1 <= up_lim_1_1 then Enforcelowlim_1_1 else up_lim_1_1;
  Out1_1_1 = Enforceuplim_1_1;
tel

node LONGITUDINAL_CONTROLLER_AltitudeControl_VariableRateLimit (ratelim_1_1 :
real; input_1_1 : real; ICtrig_1_1 : bool; IC_1_1 : real)
returns (output_1_1 : real) ;
var
  init : bool;
  Gain_1_1 : real;
  Gain1_1_1 : real;
  Sum2_1_1 : real;
  VariableLimitSaturation_1_1 : real;
  integrator_reset_Add_1_1 : real;
  integrator_reset_Constant_1_1 : real;
  integrator_reset_Gain1Reset_1_1 : real;
  integrator_reset_Product_1_1 : real;
  integrator_reset_Product1_1_1 : real;
  integrator_reset_Product2_1_1 : real;
  integrator_reset_Sum1_1_1 : real;
  integrator_reset_Sum2Reset_1_1 : real;
  integrator_reset_Sum3_1_1 : real;
  integrator_reset_Sum4_1_1 : real;
  integrator_reset_delay_sharp_1_1_1 : real;
  integrator_reset_delay_sharp_2_1_1 : real;
  integrator_reset_delay_sharp_3_1_1 : bool;
  integrator_reset_eq0_1_1 : bool;
  integrator_reset_ne0_1_1 : bool;
  integrator_reset_ne1_1_1 : bool;
  integrator_reset_zero_1_1 : real;
  arg1, arg2, arg3 : real;
let 
  init = true fby false;
  Gain_1_1 = 20.0 * Sum2_1_1;
  Gain1_1_1 = -1.0 * ratelim_1_1;
  Sum2_1_1 = input_1_1 - integrator_reset_delay_sharp_2_1_1;
  VariableLimitSaturation_1_1 =
    LONGITUDINAL_CONTROLLER_AltitudeControl_VariableRateLimit_VariableLimitSaturation(
      ratelim_1_1, Gain_1_1, Gain1_1_1);
  integrator_reset_Add_1_1 = integrator_reset_Product1_1_1 + integrator_reset_Product2_1_1;
  integrator_reset_Constant_1_1 = 0.0;
  integrator_reset_Gain1Reset_1_1 = 1.0 * VariableLimitSaturation_1_1;
  integrator_reset_Product_1_1 = if init then IC_1_1 else 0.0 ;
  integrator_reset_Product1_1_1 =
    if integrator_reset_ne0_1_1 then integrator_reset_Sum3_1_1 else 0.0 ;
  integrator_reset_Product2_1_1 =
    if integrator_reset_eq0_1_1 and integrator_reset_ne1_1_1
    then integrator_reset_Sum3_1_1 else 0.0 ;
  integrator_reset_Sum1_1_1 =
    integrator_reset_Gain1Reset_1_1 + integrator_reset_Sum2Reset_1_1;
  integrator_reset_Sum2Reset_1_1 =
    integrator_reset_Sum4_1_1 + integrator_reset_Product_1_1;
  integrator_reset_Sum3_1_1 = - integrator_reset_delay_sharp_2_1_1 + IC_1_1;
  integrator_reset_Sum4_1_1 =
    integrator_reset_delay_sharp_2_1_1 + integrator_reset_Add_1_1;
  integrator_reset_delay_sharp_1_1_1 = 1.0 fby integrator_reset_Constant_1_1;
  integrator_reset_delay_sharp_2_1_1 = 0.0 fby integrator_reset_Sum1_1_1;
  integrator_reset_delay_sharp_3_1_1 = false fby ICtrig_1_1;
  arg1 = if ICtrig_1_1 then 1.0 else 0.0;
  integrator_reset_eq0_1_1 = (arg1 = integrator_reset_zero_1_1);
  arg2 = if ICtrig_1_1 then 1.0 else 0.0;
  integrator_reset_ne0_1_1 = not(arg2 = integrator_reset_zero_1_1);
  arg3 = if integrator_reset_delay_sharp_3_1_1 then 1.0 else 0.0;
  integrator_reset_ne1_1_1 = not(arg3 = integrator_reset_zero_1_1);
  integrator_reset_zero_1_1 = 0.0;
  output_1_1 = integrator_reset_delay_sharp_2_1_1;
tel

node LONGITUDINAL_CONTROLLER_AltitudeControl_Saturation1 (SigIn_1_1 : real)
returns (Out1_1_1 : real) ;
var
  Constant1_1_1 : real;
  Constant2_1_1 : real;
  Enforcelowlim_1_1 : real;
  Enforceuplim_1_1 : real;
let 
  Constant1_1_1 = 0.0001;
  Constant2_1_1 = 1000.0;
  Enforcelowlim_1_1 =
    if Constant1_1_1 >= SigIn_1_1 then Constant1_1_1 else SigIn_1_1;
  Enforceuplim_1_1 =
    if Enforcelowlim_1_1 <= Constant2_1_1
    then Enforcelowlim_1_1 else Constant2_1_1;
  Out1_1_1 = Enforceuplim_1_1;
tel

node LONGITUDINAL_CONTROLLER_AltitudeControl (
  engage_1_1 : bool; AltCmd_1_1, Altitude_1_1, gskts_1_1, hdot_1_1 : real)
returns (altgamcmd_1_1 : real) ;
var
  Abs_1_1 : real;
  Constant1_1_1 : real;
  Constant3_1_1 : real;
  Constant4_1_1 : real;
  Divide_1_1 : real;
  Kh_1_1 : real;
  LogicalOperator_1_1 : bool;
  Mux_1_1 : real; Mux_1_2 : real;
  Mux1_1_1 : real; Mux1_1_2 : real;
  Saturation1_1_1 : real;
  Sum_1_1 : real;
  Sum3_1_1 : real;
  Switch_1_1 : real;
  VariableRateLimit_1_1 : real;
  VariableLimitSaturation_1_1 : real;
  k_1_1 : real;
  kts2fps_1_1 : real;
  r2d_1_1 : real;
  arg, Divide_1_1_a, Divide_1_1_b : real;
let 
  Abs_1_1 = if hdot_1_1 >= 0.0 then hdot_1_1 else -hdot_1_1;
  Constant1_1_1 = 0.0;
  Constant3_1_1 = 10.0;
  Constant4_1_1 = 3.2;
  arg = if gskts_1_1 < 100.0 then 200.0 else Saturation1_1_1;
  Divide_1_1_a = divid_bounded_num(VariableRateLimit_1_1, arg, 168.78, 1000.0);
  Divide_1_1_b = divid_bounded_num(VariableRateLimit_1_1,
                                   Saturation1_1_1, 0.0001, 1000.0);
  Divide_1_1 = if gskts_1_1 >= 100.0 then Divide_1_1_a else Divide_1_1_b;
  Kh_1_1 = 0.08 * Sum_1_1;
  LogicalOperator_1_1 = not engage_1_1;
  Mux_1_1 = AltCmd_1_1 ;
  Mux_1_2 = Altitude_1_1 ;
  Mux1_1_1 = VariableLimitSaturation_1_1 ;
  Mux1_1_2 = VariableRateLimit_1_1 ;
  Saturation1_1_1 =
    LONGITUDINAL_CONTROLLER_AltitudeControl_Saturation1(kts2fps_1_1);
  Sum_1_1 = AltCmd_1_1 - Altitude_1_1;
  Sum3_1_1 = Abs_1_1 + Constant3_1_1;
  Switch_1_1 = if engage_1_1 then Kh_1_1 else Constant1_1_1 ;
  VariableRateLimit_1_1 =
    LONGITUDINAL_CONTROLLER_AltitudeControl_VariableRateLimit(
      Constant4_1_1, VariableLimitSaturation_1_1, LogicalOperator_1_1, hdot_1_1);
  VariableLimitSaturation_1_1 =
    LONGITUDINAL_CONTROLLER_AltitudeControl_VariableLimitSaturation(
      Sum3_1_1, Switch_1_1, k_1_1);
  k_1_1 = -1.0 * Sum3_1_1;
  kts2fps_1_1 = 1.6878 * gskts_1_1;
  r2d_1_1 = 57.2958 * Divide_1_1;
  altgamcmd_1_1 = r2d_1_1;
tel

node LONGITUDINAL_CONTROLLER (FPACmd_1_1 : real; AltEng_1_1 : bool; FpaEng_1_1 :
bool; AltCmd_1_1 : real; Alt_1_1 : real; thetaDeg_1_1 : real; qDeg_1_1 : real;
GsKts_1_1 : real; hdot_1_1 : real; VT_1_1 : real; Gamma_1_1 : real; CAS_1_1 :
real; ElevStick_1_1 : real)
returns (alt_cmd_out, pitch_cmd_out, ElevCmd_1_1 : real) ;

var
  AltitudeControl_1_1 : real;
  EngageORzero_1_1 : real;
  FPAControl_1_1 : real;
  LogicalOperator_1_1 : bool;
  ManualOverride_1_1 : real;
  PitchInnerLoop_1_1 : real;
  Sum7_1_1 : real;
  act_cmd_ge_cmd, alt_out_loc_pos : bool ;
  k2_1_1 : real;
  k5_1_1 : real;
let 
  AltitudeControl_1_1 = LONGITUDINAL_CONTROLLER_AltitudeControl(
    AltEng_1_1, AltCmd_1_1, Alt_1_1, GsKts_1_1, hdot_1_1);
  EngageORzero_1_1 = LONGITUDINAL_CONTROLLER_EngageORzero(
    LogicalOperator_1_1, PitchInnerLoop_1_1);
  FPAControl_1_1 = LONGITUDINAL_CONTROLLER_FPAControl(
    FpaEng_1_1, Sum7_1_1, Gamma_1_1, thetaDeg_1_1, VT_1_1);
  LogicalOperator_1_1 = AltEng_1_1 or FpaEng_1_1;
  ManualOverride_1_1 =
    LONGITUDINAL_CONTROLLER_ManualOverride(ElevStick_1_1, EngageORzero_1_1);
  PitchInnerLoop_1_1 =
    LONGITUDINAL_CONTROLLER_PitchInnerLoop(k5_1_1, thetaDeg_1_1,
                                           qDeg_1_1, CAS_1_1);
  Sum7_1_1 = FPACmd_1_1 + k2_1_1;
  act_cmd_ge_cmd = Sum7_1_1 >= FPACmd_1_1 ;
  alt_out_loc_pos = k2_1_1 >= 0.0 ;
  k2_1_1 = 1.0 * AltitudeControl_1_1;
  k5_1_1 = 1.0 * FPAControl_1_1;
  ElevCmd_1_1 = ManualOverride_1_1;
  pitch_cmd_out =
    if act_cmd_ge_cmd or not act_cmd_ge_cmd
    then if alt_out_loc_pos or not alt_out_loc_pos
         then FPAControl_1_1
         else 0.0
    else 0.0 ;
  alt_cmd_out = AltitudeControl_1_1 ;
tel

node Mode_plus_Longitudinal (
  head_mode : real ;
  ail_stick_in : real ;
  elev_stick_in : real ;
  -- Altitude mode.
  alt_mode : real ;
  -- Flight Path Angle mode.
  fpa_mode : real ;
  -- Auto Throttle mode.
  at_mode : real ;
  alt_cmd_in : real ;
  alt_in : real ;
  cas_in : real ;
  cas_cmd : real ;
  pitch_in : real ;
  qbdegf_1_1 : real ;
  gskts_in : real ;
  hdot_in : real ;
  speed_in : real ;
  fpa_in : real ;
  fpa_cmd_in : real
) returns (
  head_eng_out, alt_eng_out, at_eng_out, fpa_eng_out : bool ;
  cas_cmd_out, alt_cmd_out, pitch_cmd_out, elev_cmd_out : real
) ;

let 
  (head_eng_out, alt_eng_out, fpa_eng_out, at_eng_out, cas_cmd_out) =
    MODE_LOGIC(head_mode, ail_stick_in, elev_stick_in, alt_mode, fpa_mode,
               at_mode, alt_cmd_in, alt_in, cas_in, cas_cmd);

  assert (if fall(alt_eng_out) then not fpa_eng_out else true) ;

  (alt_cmd_out, pitch_cmd_out, elev_cmd_out) =
    LONGITUDINAL_CONTROLLER(fpa_cmd_in, alt_eng_out, fpa_eng_out, alt_cmd_in,
                            alt_in, pitch_in, qbdegf_1_1, gskts_in, hdot_in,
                            speed_in, fpa_in, cas_in, elev_stick_in);
tel

